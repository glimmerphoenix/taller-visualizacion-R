[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visualización de datos con R",
    "section": "",
    "text": "Prefacio\nEn este taller exploramos los fundamentos prácticos para la creación de gráficos para visualización de datos utilizando el lenguaje R. La representación gráfica de la información es un apartado fundamental en todo proyecto de Ciencia de Datos, puesto que permite descubrir patrones y características no evidentes, identificar valores atípicos, así como resumir la información de forma más evidente y directa para el espectador. Aunque este apartado es en sí mismo muy amplio, en este taller vamos a centrarnos en los típos de gráficos básicos, así como en visualizaciones que por su especial relevancia para aplicaciones en Ciencias Agrarias y Ambientales puedan resultar interesantes para los/as participantes\nEste es un taller práctico que presenta ejemplos reales y comandos para crear paso a paso visualizaciones de datos efectivas con R. Además, junto a la explicación de los conceptos clave para entender este proceso también se ofrecen recomendaciones sobre buenas prácticas para crear gáficos más informativos y claros, evitando errores comunes y potenciando su capacidad de condensar gran cantidad de información sin que conlleve una excesiva complejidad para su correcta interpretación.\nLos apuntes para este taller práctico se han realizado con Quarto, una herramienta para creación de documentación científica y programación literaria compatible con R y otros lenguajes de programación científica.",
    "crumbs": [
      "Prefacio"
    ]
  },
  {
    "objectID": "index.html#requisitos-previos",
    "href": "index.html#requisitos-previos",
    "title": "Visualización de datos con R",
    "section": "Requisitos previos",
    "text": "Requisitos previos\nPara poder realizar los ejemplos inlcuidos en este taller necesitas tener instalado R y una IDE de desarrollo para este lenguaje. Se recomienda instalar RStudio o MS Visual Code como entorno de programación.\n\nInstalación de R.\nInstalación de RStudio.\n\nAdicionalmente, es necesario instalar una serie de paquetes R antes de ejecutar los ejemplos, para que todas las dependencias estén disponibles en nuestro sistema. Consulta el Apéndice B.1 Requisitos previos para comprobar el listado de paquetes R necesarios.",
    "crumbs": [
      "Prefacio"
    ]
  },
  {
    "objectID": "01-elements.html",
    "href": "01-elements.html",
    "title": "1  Elementos de la visualización de datos",
    "section": "",
    "text": "1.1 Importancia de la visualización de datos\nNunca se podrá insistir lo suficiente en la extrema importancia que la visualización de datos tiene dentro del proceso de preparación y análisis de datos. Un ejemplo sencillo pero muy convincente es el llamado Cuarteto de Anscombe, introducido por dicho autor hace ya más de 50 años (Anscombe, 1973). Se trata de 4 datasets que tienen identicas propiedas estadística de resumen básico de datos: media, varianza, correlación y recta de regresión simple ajustada por el método de mínimos cuadrados. Sin embargo, una inspección gráfica revela rápidamente estructuras claramente diferentes en cada conjunto de datos, tal y como podemos ver en la Figura 1.1.\nEn consecuencia, queda demostrado que es imprescindible representar gráficamente nuestros datos si queremos evitar sorpresas durante el proceso de preparación y análisis.",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elementos de la visualización de datos</span>"
    ]
  },
  {
    "objectID": "01-elements.html#importancia-de-la-visualización-de-datos",
    "href": "01-elements.html#importancia-de-la-visualización-de-datos",
    "title": "1  Elementos de la visualización de datos",
    "section": "",
    "text": "Figura 1.1: Valores, estadísticos resumen y representación gŕafica de los cuatro datasets del llamado Cuarteto de Anscombe. La representación gráfica muestra las rectas de regresión simple que se ajustan a cada dataset, todas ellas idénticas entre sí. Fuente: (Munzner, 2015).",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elementos de la visualización de datos</span>"
    ]
  },
  {
    "objectID": "01-elements.html#estrategia-de-diseño-y-selección-de-gráficos",
    "href": "01-elements.html#estrategia-de-diseño-y-selección-de-gráficos",
    "title": "1  Elementos de la visualización de datos",
    "section": "1.2 Estrategia de diseño y selección de gráficos",
    "text": "1.2 Estrategia de diseño y selección de gráficos\nA poco que repasemos algunos sitios web, libros de referencia, artículos y tutoriales sobre visualización de datos, rápidamente nos daremos cuenta de la ingente cantidad de material y el vasto catálogo de opciones, elementos de diseño y oportunidades de personalización que se abren ante nosotros. En esta situación, resulta complicado decidir qué diseño o qué combinación de elementos son los más adecuados para nuestro caso particular. Para guiarnos en esta tarea, Munzner (2015) propone un método sencillo que se basa en tres preguntas clave:\n\nWhat?: Identificar qué datos queremos representar, cuál es su naturaleza o modalidad (cuantitativos, cualitativos, ordenados/ranking, grafo, serie temporal, datos espaciales, etc.). Dependiendo de la modalidad de los datos, su tamaño y otras propiedades relevantes podremos considerar o descartar unos elementos o diseños de visualización u otros.\nWhy?: Reflexionar sobre el propósito de nuestro gráfico, qué queremos mostrar o resaltar y cómo queremos dirigir la atención del espectador hacia los aspectos más importantes del mismo.\nHow?: Una vez que hemos filtrado los posibles elementos y diseños compatibles con nuestros datos, pensamos en cuáles de ellos ofrecen la combinación más adecuada para conseguir el propósito inicial que hemos establecido.\n\nSi seguimos este método de toma de decisiones conseguiremos que nuestros gráficos sean más informativos, más sencillos de interpretar y capten mejor la atención de la audiencia.",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elementos de la visualización de datos</span>"
    ]
  },
  {
    "objectID": "01-elements.html#tipos-de-datos-y-datasets",
    "href": "01-elements.html#tipos-de-datos-y-datasets",
    "title": "1  Elementos de la visualización de datos",
    "section": "1.3 Tipos de datos y datasets",
    "text": "1.3 Tipos de datos y datasets\nLos datos que son objetos de análisis están caracterizados por un cierto tipo (a veces también nos referimos a su modalidad) y una semántica. El tipo nos indica su estructura o su interpretación matemática, mientras que la semántica de los datos es su significado en el mundo real.\n\n\n\n\n\n\nTipos de datos y formato de representación\n\n\n\nEl tipo de los datos está directamente relacionado con el formato de representación que utilizamos para almacenar su valor. Por ejemplo, datos de tipo numérico se pueden almacenar como números enteros, en coma flotante, números de doble precisión, etc. Los datos categóricos tienen valores que corresponden a etiquetas o identificadores de cada categoría o grupo.\nDebemos tener cuidado con interpretaciones equívocas del tipo y formato de los datos al representarlos gráficamente. Por ejemplo, si una variable representa el código postal, sus valores serán números pero su tipo de datos debería ser categórico (factor, en R), no una cantidad (no es una variable cuantitativa).\n\n\nLa Figura 1.2 muestra cinco tipos de datos básicos:\n\n\n\n\n\n\nFigura 1.2: Los cinco tipos básicos de datos que consideramos en este taller. Fuente: (Munzner, 2015.)\n\n\n\n\nUn ítem es una entidad individual discreta, una unidad de nuestro análisis, como por ejemplo una fila en una tabla (con tidy data) o un nodo de un grafo.\nUn atributo es una propiedad o característica específica que se puede medir, observar o registrar. También se usan los nombres variable, dimensión, feature o campo.\nUn enlace (link en inglés) es una relación o conexión explícita entre dos ítems, típicamente cuando estamos representando un grafo.\nUna malla (grid) representa una estrategia para muestrear datos teniendo en cuenta las relaciones geométricas y topológicas entre las celdas.\nFinalmente, la posición o ubicación en datos espaciales nos proporciona coordenadas en un espacio de representación 2D o 3D en el espacio como, por ejemplo, un par (latitud, longitud).\n\nDebemos remarcar que, en ocasiones, algunos atributos tienen significados especiales, como es el caso ya mencionado de la ubicación. Por ejemplo, en datos que representan series temporales uno de los atributos de nuestros ítems será una marca de tiempo (fecha, hora o ambas) que caracteriza a dicho ìtem. A la hora de representar estos datos tenemos que tener en cuenta la dependencia estricta que tienen respecto a ese atributo. De lo contrario, estaríamos rompiendo la estructura de los datos y degradando su calidad.\n\n\n\n\n\n\nCorrelación y datos con dependencias\n\n\n\nSi un dataset contiene valores tomados en diferentes instantes de tiempo, es necesario tener en cuenta ese atributo al representarlos gráficamente y analizarlos. Los valores de datos tomados en instantes de tiempo cercanos entre sí tienden a ser más parecidos entre ellos (alta correlación) que los datos tomados en instantes de tiempo más alejados (baja correlación).\nEn general, podemos hablar del concepto de datos con dependencias estrictas para reflejar el hecho de que uno o más atributos (marca de tiempo, ubicación o ambos simultáneamente) determinan fuertemente la estructura interna de ese dataset y la organización de sus valores.\n\n\nLa forma en la que organizamos los datos para su almacenamiento y procesamiento determina el tipo de dataset con el que vamos a trabajar. La Figura 1.3 representa los cuatro tipos básicos de datasets, junto con algunos tipos adicionales.\n\n\n\n\n\n\nFigura 1.3: Los cuatro tipos básicos de datasets (tablas, grafos y árboles, cuerpos (o campos) y geometrías) junto con otros tipos adicionales (clusters, conjuntos y listas). Fuente: (Munzner, 2015.)\n\n\n\n\nTablas: Los datos se pueden representar como filas y columnas de una tabla, donde cada fila representa un ítem y cada columna representa un atributo o feature (concepto tidy data (Wickham, 2014)). Estas tablas se suelen representar en memoria mediante un objeto Data Frame.\nUna red o grafo es un dataset orientado a consignar y representar las relaciones entre dos o más ítems. En este caso el enlace representa una relación entre dos ítems. A veces, los enlaces pueden tener también atributos que los describan (por ejemplo, un grado de importancia, tipo de relación, etc.). Los árboles son grafos jerárquicos que no tienen ciclos y representan relaciones multinivel entre los ítems.\nUn cuerpo (en inglés field, a veces traducido como campo) es un dataset que contiene valores de atributos asociados con celdas o regiones. Cada celda contiene valores medidos o calculados a partir de un dominio continuo. Un ejemplo sería la división de una imagen satelital mediante una malla de celdas hexagonales, para después medir y asignar un valor promedio del Índice de Vegetación de Diferencia Normalizada (NDVI) o del Índice de Humedad de diferencia normalizada (NDWI) en esa celda. La malla que empleamos para subdividir el dominio continuo en celdas discretas puede ser también rectilínea o seguir otro tipo de geometría. También puede ser uniforme (división a intervalos regulares) o no uniforme.\nUna geometría es un dataset específico que contiene información para respresentar formas de ítems en ubicaciones espaciales específicas. Es un tipo de dataset intrínsecamente relacionado con las representaciones de datos espaciales, como por ejemplo los polígonos que delimitan las fronteras de municipios, provincias o países en un mapa político.\n\nOtros tipos específicos de datasets incluyen los conjuntos (sets), que son grupos no ordenados de ítems (usualmente sin posibilidad de que se repitan); las listas (conjuntos ordenados de ítems); y los clusters, que agrupan los elementos de acuerdo con el grado de similaridad entre ellos.\n\n1.3.1 Gráficos dinámicos e interactivos\nEn este taller, la mayoría de gráficos que vamos a construir son estáticos, es decir, la representación visual de los datos permanece fija e inalterada. Sin embargo, en ciertas situaciones puede ser beneficioso construir representaciones dinámicas de nuestros datos, como representa la Figura 1.4. Un ejemplo suelen ser los gráficos de evolución en los que representamos más de un atributo simultáneamente, como los que podemos representar con el paquete gganimate en R.\n\n\n\n\n\n\nFigura 1.4: Dos tipos de disponibilidad de resultados gráficos. Los gráficos dinámicos, a su vez, pueden admitir cierto grado de interactividad o no. Fuente: (Munzner, 2015).\n\n\n\nA su vez, los gráficos dinámicos pueden ser también interactivos, es decir, además de añadir dinamismo pueden permitir al espectador interactuar con el gráfico para explorar aspectos concretos de los datos. Un ejemplo muy claro de este tipo de gráficos interactivos son los paneles de seguimiento o dashboards que podemos construir con la herramienta Shiny, tal y como se muestra en la Figura 1.5.\n\n\n\n\n\n\nFigura 1.5: Ejemplo de gráfico interactivo para selección de datos en un diagrama de dispersión",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elementos de la visualización de datos</span>"
    ]
  },
  {
    "objectID": "01-elements.html#tipos-de-atributos",
    "href": "01-elements.html#tipos-de-atributos",
    "title": "1  Elementos de la visualización de datos",
    "section": "1.4 Tipos de atributos",
    "text": "1.4 Tipos de atributos\nLa Figura 1.6 muestra diferentes tipos de atributos que caracterizan los ìtems de un dataset.\n\nUn atributo categórico consta de un conjunto de etiquetas de identificación, que no tienen ningún tipo de ordenación interna. Un ejemplo serían nombres de países o regiones, colores, etc.\nUn atributo ordenado contiene valores que están ordenados entre sí, es decir, se pueden aplicar operaciones de comparación lógica entre dichos valores. Un ejemplo sería los tamaños de una camiseta (S, M, L, XL, etc.), los resultados de valoración (, , , etc. ). Un caso particular son las variables cuantitativas, en las que los valores se referencian respecto a un mismo origen.\nSegún la dirección de su ordenación, podemos encontrar atributos secuenciales, divergentes o cíclicos.\n\n\n\n\n\n\n\nFigura 1.6: Tipos de atributos que describen los ítems de un dataset. Fuente: (Munzner, 2015).",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elementos de la visualización de datos</span>"
    ]
  },
  {
    "objectID": "01-elements.html#marcas-y-canales",
    "href": "01-elements.html#marcas-y-canales",
    "title": "1  Elementos de la visualización de datos",
    "section": "1.5 Marcas y canales",
    "text": "1.5 Marcas y canales\nUnos de los principios fundamentales para la construcción de gráficos efectivos para visualización de datos es ser conscientes de la elección de las marcas o símbolos que empleamos para representar la información así como los canales de percepción de los espectadores que pretendemos emplear. La Figura 1.7 muestra un resumen de las principales marcas y canales como elementos constructivos que podemos emplear para diseñar nuestros gráficos (Munzner, 2015).\n\n\n\n\n\n\nFigura 1.7: Catálogo de algunos de los canales que podemos utilizar en nuestras visualizaciones para representar información. Fuente: (Munzner, 2015).\n\n\n\nDebemos prestar atención a la clasificación que muestra la Figura 1.7, puesto que no todas las marcas ni todos los canales tienen la misma efectividad al representar la información para que el espectador la reciba e interprete. Por ejemplo, a pesar de que se usa con mucha frecuencia el canal de luminancia o saturación de la paleta de colores es mucho menos efectivo para codificar la información y que el espectador la inteprete que la longitud o el área 2D. A su vez, la representación de datos en volúmenes 3D debe ser un recurso que no se utilice a la ligera y su empleo debe estar muy bien justificado puesto que, en general, es un canal de información mucho más difícil de intepretar (sobre todo para ciertas tareas, como comparaciones).",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elementos de la visualización de datos</span>"
    ]
  },
  {
    "objectID": "01-elements.html#paletas-de-colores",
    "href": "01-elements.html#paletas-de-colores",
    "title": "1  Elementos de la visualización de datos",
    "section": "1.6 Paletas de colores",
    "text": "1.6 Paletas de colores\nExisten multitud paletas de colores que podemos usar en R para la representación gráfica de nuestros datos. Tanta variedad puede, ciertamente, abrumar al usuario poco experimentado, que no sabe bien qué opción es la mejor para determinada aplicación. Por si eso no fuera suficiente, es posible personalizar cualquier paleta o construir nuestra propia paleta de colores para una visualización.\nSin embargo, se pueden encontrar algunas recomendaciones interesantes que nos pueden servir de guía:\n\nEl principal consejo es no escoger a mano colores individuales que no estén agrupados ya en una paleta. La construcción de las paletas de colores que ofrecen varios paquetes de R e incluso R base ya ha tenido en cuenta, en su diseño, factores sobre teoría de color, interpretación y otros usos específicos.\nDedica un poco de tiempo a revisar la documentación de alguno de estos paquetes para buscar paletas que estén diseñadas para tu caso particular. Por ejemplo, si quieres representar información de la orografía de un terreno (curvas de nivel), temperatura de ciertas áreas o valores que describen campos en un mapa geopolítico, es casi seguro que uno de estos paquetes ofrece soluciones adaptadas a cada caso particular.\nEl número máximo de colores que incluye cada paleta oscila entre 7 y 10. En muy raras ocasiones se pueden encontrar paletas de más de 10 colores y por una buena razón. Un excesivo número de colores generará confusión en nuestro gráfico, ya que nuestro cerebro tendrá más problemas para identificar cada color individual.\nRecuerda pensar en el propósito del gráfico que quieres construir y elige una paleta que se adecúe a ese objetivo. Hay paletas con gradaciones de saturación o luminancia del mismo color para indicar subidas o bajadas graduales de atributos con valores cuatitativos, mientras que otras paletas combinan colores que se distingan perfectamente los unos de los otros para identificar cada caso (por ejemplo, el gráficos con múltiples líneas que representan la evolución de varias variables). La Figura 1.8 muestra un ejemplo de los dos tipos de paletas mencionados para el caso del paquete RColorBrewer.\n\n\nlibrary(RColorBrewer)\ndisplay.brewer.all()\n\n\n\n\n\n\n\nFigura 1.8: Catálogo de paletas de colores incluidas en el paquete RColorBrewer.\n\n\n\n\n\nAlgunos de los paquetes R más conocidos que ofrecen paletas de colores para representación gráfica de datos son:\n\nEl paquete viridis y su versión reducida viridisLite (enlazado por defecto en el conocido paquete ggplot2) presenta paletas de colores diseñadas para mejorar su legibilidad en espectadores con formas habituales de ceguera a algún color u otros tipos de deficiencias visuales. Los mapas de color que ofrecen tienen una escala de percepción uniforme y todos ellos son directamente convertibles a formato B/N para impresión en escala de grises.\nEl paquete colorspace proporciona paletas específicamente diseñadas dependiendo del tipo de atributo que queremos representar, incluyendo valores categóricos, secuenciales, divergentes, etc. La Figura 1.9 muestra un ejemplo de paletas diseñadas en base a los valores de tonalidad, crominancia y luminancia para varios tipos de atributos.\n\n\nlibrary(colorspace)\nhcl_palettes(plot = TRUE)\n\n\n\n\n\n\n\nFigura 1.9: Paletas incluidas en el paquete colorspace para diferentes tipos de atributos.\n\n\n\n\n\nAdemás, este paquete incluye funciones muy potentes para evaluar la paleta de colores escogida, mostrando gráficos que describen sus características más destacadas para ponderar si la elección es adecuada para nuestros intereses.\nq4 &lt;- qualitative_hcl(4, palette = \"Dark 3\")\ndemoplot(q4, \"bar\")\nhclplot(q4)\nspecplot(q4, type = \"o\")\n\n\n\n\n\n\n\n\n\n\n\n(a) Gráfico de de barras para comprobar el efecto de la paleta escogida.\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Valores HCL de la paleta.\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) Los valores de luminancia son constantes en toda la paleta; la tonalidad cambia linealmente.\n\n\n\n\n\n\n\nFigura 1.10: Gráficos de evaluación de una paleta de color incluida en el paquete colorspace.\n\n\n\n\nOtro paquete muy conocido es RColorBrewer, utilizado con frecuencia en cartografía puesto que ofrece una herramienta interactiva de selección de paletas en función de los objetivos de nuestro mapa.\n\n\n\n\n\nAnscombe, F. J. (1973). Graphs in Statistical Analysis. American Statistician, 27(1), 17-21.\n\n\nMunzner, T. (2015). Visualization Analysis and Design. A K Peters. http://www.cs.ubc.ca/\\%7Etmm/vadbook/\n\n\nWickham, H. (2014). Tidy Data. Journal of Statistical Software, Articles, 59(10), 1-23. https://doi.org/10.18637/jss.v059.i10",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elementos de la visualización de datos</span>"
    ]
  },
  {
    "objectID": "02-principles.html",
    "href": "02-principles.html",
    "title": "2  Principios de visualización de datos",
    "section": "",
    "text": "2.1 Reglas básicas\nComencemos por algunas reglas básicas de creación de gráficos (Munzner, 2015, Capítulo 6).\nUn caso muy diferente y que no tratamos en este taller es la visualización de datos 3D inmersiva, es decir, utilizando dispositivos como gafas de realidad virtual y otros medios que permitan al espectador interpretar la visualización 3D en un espacio de representación también en 3D. Esta es un área de investigación muy activa en la actualidad y con resultados muy prometedores.",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Principios de visualización de datos</span>"
    ]
  },
  {
    "objectID": "02-principles.html#reglas-básicas",
    "href": "02-principles.html#reglas-básicas",
    "title": "2  Principios de visualización de datos",
    "section": "",
    "text": "Se debe evitar un uso no justificado de elementos y gráficos en 3D. En este sentido se debería puntualizar que nos referimos a una representanción 3D en una superficie o área de visualización bidimensional, como puede ser un papel, un póster o una pantalla. Esta recomendación se basa en la dificultad que entrañan los artefactos visuales empleados para dar una sensación 3D en gráficos representados en un área 2D, que pueden engañar a nuestra percepción y dificultad comparaciones y apreciación de elementos relevantes en el gráfico.\n\n\n\nTambién se debe evitar el uso no justificado de una representación gráfica en 2D si, por ejemplo, es suficiente con una tabla o una lista de valores para representar los resultados.\nSe deben favorecer elementos y canales que impongan poca carga cognitiva en el espectador para interpretar el gráfico. Por ejemplo, si tenemos un gráfico que permite girar la figura en varias direcciones, nuestra mente tiene que recordar qué vio en las perspectivas anteriores para interpretar el gráfico por completo. Por contra, si presentamos una visualización estática con planta, alzado y perfil se pueden extraer conclusiones más fácilmente, al acceder a todas las perspectivas de forma simultánea.\nEl uso de animaciones puede ser muy potente, pero igualmente impone una elevada carga cognitiva para nuestro cerebro. Considera el caso anterior con el paquete gganimate y observa como tu cerebro debe recordar la posición de partida de algunos países de interés para interpretar correctamente la evolución del gráfico. Un ejemplo sería el mostrado en la Figura 2.1. No es de extrañar que, en contraste, muchos diseñadores prefieran las parrillas de gráficos (en inglés lattice o facets) para la representación de información en varios paneles de forma simultánea, como muestra la Figura 2.2.\n\n\n\n\n\n\n\nFigura 2.1: Gráfico que muestra la evolución temporal de los crímenes relacionados con vehículos cometidos en la ciudad de Milwaukee (EE.UU.), entre 2016 y 2019 mediante una animación. Fuente: enlace.\n\n\n\n\n\n\n\n\n\nFigura 2.2: Gráfico que muestra la evolución temporal de los crímenes relacionados con vehículos cometidos en la ciudad de Milwaukee (EE.UU.), entre 2016 y 2019 utilizando facets. Fuente: enlace.\n\n\n\n\nUna importante recomendación que popularizó el profesor Shneiderman (1996) es la de construir los gráficos de forma que presenten un resumen global en primer lugar y luego permitan obtener más detalles o incluso (si añadimos interactividad) se pueda hacer zoom o filtrar información para fijarnos en aspectos concretos del gráfico.\nEs importante que el gráfico responda con agilidad y que no se introduzcan latencias innecesarias en la representación de algunos elementos como, por ejemplo, cuando desplazamos el gráfico, seleccionamos un grupo de elementos, hacemos zoom, etc. En este sentido, algunas bibliotecas para desarrollo de gráficos interactivos muy potentes son también conocidas por introducir notables retardos en la renderización de la visualización. Esto estropea la experiencia de usuario y entorpece la interpretación del contenido del gráfico.\nEs fundamental, incluso actualmente (con menores costes de impresión a color y pantallas con gran profundidad de color y una resolución envidiable), que nuestros gráficos puedan ser directamente representados en B/N (más exactamente, en una paleta de tonos grises) si fuese necesario.\nLos mejores gráficos destacan, además de por su funcionalidad, por su belleza. Sin embargo, este segundo aspecto es difícil de conseguir en muchos casos y es más un arte que una ciencia. Por tanto, es importante que primero nos concentremos en crear un gráfico funcional que, por lo menos, cumpla el objetivo de diseño que nos hemos planteado.",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Principios de visualización de datos</span>"
    ]
  },
  {
    "objectID": "02-principles.html#principios-de-e.-tufte",
    "href": "02-principles.html#principios-de-e.-tufte",
    "title": "2  Principios de visualización de datos",
    "section": "2.2 Principios de E. Tufte",
    "text": "2.2 Principios de E. Tufte\nOtro de los grandes exponentes del diseño de gráficos para visualización de datos es Edward R. Tufte. En una de sus obras más conocidas (Tufte, 2001) expone algunos principios y recomendaciones útiles.\n\nMaximizar el ratio datos-tinta (data-to-ink ratio): No debemos sobrecargar el gráfico con muchos datos o elementos. Por ejemplo, un gráfico en el que tengamos una gran cantidad de puntos superpuestos hará que no veamos nada o dificultará la identificación de patrones de interés. Vemos algunos ejemplos que proporciona H. Wickham en su nueva edición del libro sobre ggplot2 (https://ggplot2-book.org/), utilizando el término overplotting para denotar este problema. La Figura 2.3 muestra cómo utilizar la transparencia (parámetro alpha) para permitir interpretar mejor el gráfico reduciendo la cantidad de “tinta” empleada.\n\n\n\n\n\n\nFigura 2.3: Ejemplo de uso del argumento alpha apara añadir transaprencia al color en un gráfico creado con ggplot2. Fuente: [ggplot2: overplotting]https://ggplot2-book.org/statistical-summaries.html#sec-overplotting.\n\n\n\nOtro buen ejemplo de cómo maximizar el ratio datos-tinta aparece en la Figura 2.4. En este caso, tanto la versión clásica del gráfico (a) como las dos versiones siguientes (b) y (c) emplean una cantidad de tinta comedida. La versión (d) comienza a presentar problemas, porque es difícil interpretar las “rugosidades” a ambos lados de la caja en el centro de la figura. Por último, las opciones (e) y (f) intentan presentar una excesiva cantidad de información, saturando el gráfico y dificultando en gran medida su correcta interpretación, puesto que muchos detalles son accesorios (lo que realmente importa en un boxplot son los estadísticos resumen de centralidad y dispersión de la distribución de valores representada).\n\n\n\n\n\n\nFigura 2.4: Seis diseños para gráfico de tipo boxplot. El tipo (c) corresponde a Tufte. Fuente: (Healy, 2019).\n\n\n\nMinimizar la porquería (chartjunk): Debemos utilizar una plantilla o tema de gráfico lo más sencillo y espartano posible, que evite el uso de adornos y aditamentos innecesarios para lo que debería ser la exclusiva interpretación de la información que recoge el gráfico.\nPriorizar los datos sobre variaciones de diseño: Cualquier elemento de diseño que se introduzca debe estar siempre supeditado a cumplir una función en la representación e interpretación de los datos, sin que la única razón para utilizarlo sea puramente estética.\nUso de facetas (small multiples) para representar evolución y facilitar las comparativas en varias dimensiones, tal y como hemos presentado en el ejemplo de la Figura 2.2.\nProporcionar siempre contexto adicional (leyenda, comentarios, anotaciones junto al gráfico o sobre el gráfico) que faciliten al máximo la interpretación de su contenido. Esta ha sido siempre una máxima distintiva de los trabajos de E. R. Tufte, llegando al extremo de inventar un formato muy personal para sus libros que se ha hecho muy popular para trabajos y publicaciones científicas (véase Cap. 6 del Taller sobre investigación reproducible con Quarto y R).",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Principios de visualización de datos</span>"
    ]
  },
  {
    "objectID": "02-principles.html#buenas-prácticas-y-recomendaciones",
    "href": "02-principles.html#buenas-prácticas-y-recomendaciones",
    "title": "2  Principios de visualización de datos",
    "section": "2.3 Buenas prácticas y recomendaciones",
    "text": "2.3 Buenas prácticas y recomendaciones\nPodemos extraer también otras prácticas y recomendaciones (Healy, 2019).\n\nPor más que estén bien diseñadas siguiendo buenos principios de visualización de datos, no debemos confiar ciegamente en las bibliotecas y herramientas de visualización, así como en las configuraciones por defecto de dichas herramientas. La Figura 2.5 muestra un ejemplo de un gráfico de barras que utiliza un diseño por defecto de ggplot2 para representar un gráfico de barras apiladas. Sin embargo, por más que el gráfico no esté saturado de información y la presentación sea simple y directa, la interpretación del mismo no es ni mucho menos evidente. Resulta muy dificultoso poder comparar la evolución entre las diferentes categorías, y más aún cuando las barras están en disposición vertical en lugar de horizontal.\n\n\n\n\n\n\n\nFigura 2.5: Gráfico de barras apiladas que muestra un ejemplo de configuración por defecto en ggplot2 que no ayuda en la interpretación de los datos representados. Fuente: (Healy, 2019).\n\n\n\n\nDebemos tener también precaución con el uso de los ratios de aspecto de nuestros gráficos. El mismo gráfico representando los mismos datos con los mismos elementos pero usando diferentes ratios de aspecto puede sugerir una interpretación muy distinta, tal y como muestra la Figura 2.6.\n\n\n\n\n\n\n\nFigura 2.6: Comparativa de utilización de dos ratios de aspecto diferentes en el mismo gráfico con los mismos datos. Fuente: (Healy, 2019).\n\n\n\n\nLas leyes de la Teoría de la Gestalt (gestalt rules) relacionan los estímulos visuales con lo que estos generan en la mente que los mira. La Figura 2.7 muestra algunas de estas reglas en acción.\n\n\n\n\n\n\nFigura 2.7: Aplicación de algunas reglas de la Gestalt para evidenciar relaciones entre los elementos representados. Fuente: (Healy, 2019).\n\n\n\nEn particular, podemos usar algunas de estas reglas para evidenciar agrupamientos, clasificaciones o entidades que pueden se tratadas como la misma cosa o como parte de la misma cosa.\n\nProximidad: los elementos que están espacialmente cerca unos de otros tienden a ser relacionados.\nSimilaridad: los elementos de aspecto parecido tienden a estar relacionados.\nConexión: los elementos que están visualmente ligados unos a otros parecen estar relacionados.\nContinuidad: los objetos parcialmente ocultos tienden a completarse con formas conocidas.\nCierre (closure): formas incompletas se perciben como completas.\nFigura y fondo: los elementos visuales se consideran en primer plano o en segundo plano.\nDestino común: los elementos que comparten una dirección de movimiento se perciben como una unidad.\n\nAtención aL correcto uso de las escalas. Muchos creadores de gráficos de visualización de datos están advertidos de la regla de evitar comparar gráficos que utilicen diferentes escalas de representación. No obstante, otra advertencia se refiere a un aspecto más sutil pero de gran impacto: un uso inadecuado de la escala de representación. La Figura 2.8 muestra dos gráficas con los mismos elementos y el mismo ratio de aspecto, pero que usan escalas verticales diferentes para representar la misma evolución temporal de los datos. A pesar de que las conclusiones deberían ser idénticas, en la gráfica de la izquierda nos da la sensación de que la caída vertical es mucho mayor y más pronunciada que en el gráfico de la derecha.\n\n\n\n\n\n\n\nFigura 2.8: Ejemplo de usuo incorrecto de la escala de representación en un gráfico de evolución temporal. Fuente: (Healy, 2019).\n\n\n\n\n\n\n\nHealy, K. (2019). Data Visualization. A Practical Introduction. Princeton University Press. https://socviz.co/\n\n\nMunzner, T. (2015). Visualization Analysis and Design. A K Peters. http://www.cs.ubc.ca/\\%7Etmm/vadbook/\n\n\nShneiderman, B. (1996). The Eyes Have It: A Task by Data Type Taxonomy for Information Visualizations. Proceedings of the 1996 IEEE Symposium on Visual Languages, Boulder, Colorado, USA, September 3-6, 1996, 336-343. https://doi.org/10.1109/VL.1996.545307\n\n\nTufte, E. R. (2001). The Visual Display of Quantitative Information. Graphics Press LLC.",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Principios de visualización de datos</span>"
    ]
  },
  {
    "objectID": "03-chart-types.html",
    "href": "03-chart-types.html",
    "title": "3  Galería de gráficos",
    "section": "",
    "text": "3.1 Taxonomía de gráficos\nA continuación, presentamos una taxonomía tentativa para clasificar diferentes tipos de gráficos en función del tipo de datos y atributos que queremos representar (Wilke, 2019).",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Galería de gráficos</span>"
    ]
  },
  {
    "objectID": "03-chart-types.html#taxonomía-de-gráficos",
    "href": "03-chart-types.html#taxonomía-de-gráficos",
    "title": "3  Galería de gráficos",
    "section": "",
    "text": "3.1.1 Análisis exploratorio de datos\nEl primer conjunto de tipos de gráficos corresponden a herramientas que podemos utilizar para representar distribuciones de valores. Estos gráficos se suelen emplear para resumir propiedades de conjuntos de datos en la fase de análisis exploratorio.\nLa Figura 3.1 muestra un primer conjunto de gráficos para este propósito, que representa distribuciones de valores univariantes.\n\n\n\n\n\n\nFigura 3.1: Algunos gráficos para representar distribuciones univariantes de valores numéricos. Fuente: (Wilke, 2019).\n\n\n\n\nHistograma: El histograma nos permite representar mediante un diagrama de barras verticales el número de ocurrencias o la frecuencia de aparición respecto al total de un intervalo de valores de un atributo numérico. Lo más usual es que los intervalos se representen en el eje horizontal y tengan todos la misma longitud, pero esto no siempre se cumple. Existen diferentes algoritmos y criterios para determinar el número de intervalos generados y el ancho de los mismos.\nDiagrama de densidad de probabilidad (KDE): Se puede ver como una aproximación continua del histograma, que muestra la frecuencia de aparición de los diferentes valores numéricos de la distribución descrita, es decir, la su función de densidad de probabilidad (o f.d.p.). Para su estimación se emplea el Estimador de Densidad del Kernel (KDE por sus siglas en inglés). Nuevamente, existen diferentes algoritmos y métodos para calcular dicho estimador. Este tipo de función tiene la ventaja de que permite comparar en el mismo gráfico varias f.d.p. simultáneamente, si no rellenamos el área bajo las curvas.\nDiagrama de densidad acumulada (CDF): Otra visión alternativa sobre cómo está repartida la distribución de valores de un atributo numérico. En este caso se representa la funcisió de densidad de probabilidad acumulada (o CDF, por sus siglas en inglés). Suele ser una herramienta muy versátil, tanto para interpretar mejor una distribución como para identificar qué posible función de distribución de probabilidad teórica se podría ajustar a un conjunto de valores.\nGráfico cuantil-cuantil (qqplot): Herramienta gráfica comumnmente empleada para comprobar la bondad del ajuste de una distribución de valores empírica respecto de una distribución teórica. Por ejemplo, un uso frecuente es el de contrastar si los residuos de un modelo de regresión se ajustan de forma creíble a una distribución Normal.\n\nEl segundo conjunto de gráficos que muestra la Figura 3.2 recoge herramientas para representar distribuciones de valores de un atributo en función de los valores de otro atributo categórico (factor en R).\n\n\n\n\n\n\nFigura 3.2: Algunos gráficos para representar distribuciones de valores en función de otro atributo categórico. Fuente: (Wilke, 2019).\n\n\n\n\nBoxplot: Su creación se debe al insigne estadístico John W. Tukey (Tukey, 1977), que lo propuso como herramienta básica para el EDA. Originalmente también se denominó box-and-whiskers plot, ya que consiste en la combinación de una caja con líneas o “bigotes” a ambos lados. Se trata de un gráfico que muestra un resumen simplificado de la distribución de valores de un atributo numérico, centrándose en cinco estadísticos de resumen claves que se muestran en la Figura 3.3:\n\nMediana: se representa mediante una línea dentro de la caja.\nRango intercuartílico (IQR): determina las dimensiones de la caja o box en el gráfico. El IQR se calcula como la diferencia entre el percentil 25 (primer cuartil o \\(Q_1\\)) y el percentil 75 (tercer cuartil o \\(Q_3\\)) de la distribución de valores.\nValores dentro del “cuerpo principal” de la distribución: los “bigotes” o líneas a ambos lados de la caja se extienden en cada sentido hasta \\(Q_1 - 1.5*IQR\\) y \\(Q_3 + 1.5*IQR\\). Los valores que caen más allá de estos dos puntos a cada lado de la distribución se pueden considerar como valores atípicos (en inglés outliers).\nValores atípicos: se representan como puntos o símbolos individuales en el gráfico, a ambos lados del cuerpo principal de la distribución (si es que existen).\n\n\n\n\n\n\n\n\nFigura 3.3: Explicación anotada de los elementos que componen un boxplot. Fuente: https://www.data-to-viz.com/caveat/boxplot.html.\n\n\n\n\nViolín: Una importante limitación del boxplot es que al resumir el aspecto de la distribución de valores mediante un gráfico esquemático en forma de caja perdemos información sobre la forma de la distribución real de valores subyancente (la f.d.p.). En consecuencia, se han propuesto alternativas como, por ejemplo, el gráfico de violín (en inglés violing plot), que representa la estimación de la f.d.p. en ambos laterales de lo que sería la caja del boxplot, añadiendo más información al gráfico. Sin embargo, esta alternativa es, de igual modo, más difícil de interpretar.\n\n\n\n\n\n\n\nAñadir jitter o puntos con desplazamiento aleatorio\n\n\n\nOtra alternativa (quizá aún más confusa, depende de la situación) para añadir más información sobre la distribución de valores subyacente en el boxplot consiste en representar los elementos reales como puntos o símbolos superpuestos a la caja, como se representa en la Figura 3.4. Para poder ver todos los puntos se añade horizontalmente un pequeño desplazamiento aleatorio o jitter, de forma que se repartan por todo el área de la caja pero respetando su ubicación en la distribución de valores.\n\n\n\n\n\n\n\n\nFigura 3.4: Cómo añadir puntos con jitter sobrepuestos al boxplot original. Fuente: https://r-graph-gallery.com/89-box-and-scatter-plot-with-ggplot2.html.\n\n\n\n\nStrip charts: semejantes a los gráficos de boxplot con puntos sobrepuestos utilizando jitter, pero eliminando la representació esquemática de la caja y las líneas del cuerpo principal de la distribución. En ocasiones, la forma del gráfico de violín se combina con el strip chart para crear un swarm plot o beeswarm plot, que también se puede crear fácilmente en R con el paquete []ggbeeswarm](https://r-charts.com/distribution/ggbeeswarm/).\nHistogramas apilados: se pueden apilar las barras de los histogramas para comparar diferentes distribuciones, aunque el gráfico resultante no es sencillo de interpretar para las distribuciones que no quedan en la parte inferior del gráfico (sólo se muestran con claridad diferencias acusadas entre grupos para el mismo intervalo).\nDiagramas de densidad solapados: una ventaja de los diagramas de densidad de probabilidad es que permiten representar varios de ellos en el mismo gráfico sobrepuestos unos a otros, siempre que utilicemos transparencia en el color de relleno del área bajo cada curva o bien que sólo coloreemos las líneas de la distribución correspondiente a cada grupo. Un ejemplo se muestra en la Figura 3.5.\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(viridisLite)\n\nggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +\n    geom_density(adjust=1.5, alpha=.4)\n\n\n\n\n\n\n\nFigura 3.5: Diagramas de densidad de probabilidad solapados para comparar las distribuciones correspondientes a varios grupos. Fuente: https://r-graph-gallery.com/135-stacked-density-graph.html.\n\n\n\n\n\n\nRidgeline plot: es una variante más organizada de los gráficos de densidad de probabilidad solapados. En este tipo de gráfico, se garantiza que todas las f.d.p. estimadas tienen la misma escala de representación horizontal, los mismos parámetros de configuración para el KDE y los gráficos para cada grupo se separan lo justo para permitir una comparación rápida y más precisa de las diferentes funciones de densidad estimadas.\n\n\nlibrary(ggridges)\nlibrary(ggplot2)\n \n# Ejemplo básico de *ridgeplot*\nggplot(diamonds, aes(x = price, y = cut, fill = cut)) +\n  geom_density_ridges() +\n  theme_ridges()\n\nPicking joint bandwidth of 458\n\n\n\n\n\n\n\n\nFigura 3.6: Ejemplo de un gráfido ridgeline creado mediante el paquete ggridges, extensión de ggplot2.\n\n\n\n\n\n\n\n3.1.2 Relaciones cuantiativo-cuantitativo (gráficos X-Y)\nEn esta sección resumimos algunos gráficos para representación de relaciones entre variables cuantitativas en ambos ejes (suponiendo un gráfico 2D). Empezamos por los tipos báiscos que se muestran en la Figura 3.7.\n\n\n\n\n\n\nFigura 3.7: Algunos gráficos para representar relaciones entre valores de dos atributos numéricos. Fuente: (Wilke, 2019).\n\n\n\n\nGráfico de dispersión o scatterplot: es el típico gráfico de coordenadas cartesianas, representando cada elemento por un punto o un símbolo. En el caso de que, además, se quieran representar puntos pertenecientes a varias categorías se puede emplear un canal adicional (color, símbolo) con una leyenda para facilitar la interpretación del gráfico.\nGráfico de burbujas: permite representar simultáneamente tres atributos cuantitativos, utilizando el tamaño del círculo o burbuja para representar la tercera dimensión de los atributos.\nScatterplot emparejado: es un caso especial en el que se comparan dos medidas del mismo atributo o de atributos diferentes pero medidos en las mismas unidades y con la misma escala. En ese caso, suele ser útil representar la línea \\(x=y\\). Un ejemplo de este tipo de gráficos que hemos mencionado antes es el qqplot.\nSlopegraph: otro tipo de gráfico para representar parejas de datos. Cada pareja de puntos se une mediante una línea horizontal, que nos da una idea de la variación que se ha producido entre los valores de esa pareja.\n\nContinuamos con otro conjunto de gráficos que permiten resumir los datos usando curvas de nivel o contorno, intervalos o bins o correlogramas, que se muestran en la Figura 3.8.\n\n\n\n\n\n\nFigura 3.8: Algunos gráficos para resumir relaciones entre valores de dos atributos numéricos. Fuente: (Wilke, 2019).\n\n\n\n\nCurvas de nivel: Las curvas de nivel permiten representar valores cuantitativos repartidos en una superficie continua, de forma que puedan ser interpretables.\nCeldas o intervalos en 2D y hexagonales: Otra variante para representar datos cuantitativos repartidos en una superficie continua consiste en establecer primero una malla de celdas (cuadradas o hexagonales) representando mediante un canal (normalmente color) el valor promedio de la variable cuantitativa dentro de esa celda.\n\nUna variante de los bins cuadrados en 2D es el gráfico de actividad que muestra número de acciones en cada periodo de tiempo (días, semanas, etc.). Un buen ejemplo son los gráficos de actividad para los perfiles de usuario de GitHub, como se muestra en la Figura 3.9.\n\n\n\n\n\n\n\n\nFigura 3.9: Gráfico de actividad con bins en 2D que muestra el número de contribuciones diarias del usuario H. Wickham en GitHub. Fuente: https://github.com/hadley.\n\n\n\n\nCorrelograma: es un gráfico en el que se representa gráficamente el grado de correlación entre los valores de varios atributos. La representación concreta de cada correlograma puede variar mucho. Algunos utilizan el canal de color y una paleta divergente para distinguir claramente las correlaciones positivas o negativas. En otros casos se añaden más canales (cambios de forma, formas incompletas representando correlación parcial). La Figura 3.10 presenta un ejemplo de correlograma creado con el paquete ggcorrplot.\n\n\nlibrary(ggcorrplot)\nlibrary(colorspace)\ndata(mtcars)\ncorr &lt;- round(cor(mtcars), 2)\nmy_palette &lt;- diverging_hcl(3, palette = \"Blue-Red\")\n\nggcorrplot(corr, hc.order = TRUE, type = \"lower\",\n   outline.col = \"white\",\n   ggtheme = ggplot2::theme_gray,\n   colors = my_palette)\n\n\n\n\n\n\n\nFigura 3.10: Correlograma para las variables cuantitativas del dataset mtcars producido con el paquete ggcorrplot.\n\n\n\n\n\nPor último, existe un subconjunto de gráficos en esta categoría para representar datos con estricta dependencia temporal, o bien con dependencia de una variable con ordenación (por ejemplo, cantidad de dosis administrada de un fertilizante o un fungicida). También se encuentran en este subconjunto las líneas de estimación de tendencia o smooth line. Todos ellos se muestran en la Figura 3.11.\n\n\n\n\n\n\nFigura 3.11: Algunos gráficos para representar valores numéricos con dependencia temporal, relacionados con variables ordenadas o para estimar tendencias. Fuente: (Wilke, 2019)\n\n\n\n\nGráfico de línea: los puntos o símbolos del gráfico se enlazan mediante una línea que remarca la secuencialidad entre las muestras. Un ejemplo de este tipo son los gráficos de series temporales, como el que se muestra en la\n\n\n\n\n\n\n\n\n\n\nFigura 3.12: Series temporales del número total de envíos mensuales de artículos de investigación a tres servidores de preprints en investigación biomédica. Fuente: (Wilke, 2019); fuente de datos: Jordan Anaya, http://www.prepubmed.org/.\n\n\n\n\nScatterplot conectado: es un gráfico en el que se representan valores de un diagrama de dispersión conectados por lineas que denotan una secuencialidad temporal entre los elementos. Hay que usarlos con cuidado, sobre todo al construirlos, para que el resultado no sea difícil de intrepretar.\nLínea suavizada de tendencia (smooth line): se trata de funciones suavizadas que resumen tendencias globales de los valores en gráficos de dispersión. Existen diversos algoritmos para generarlas, como por ejemplo el LOESS (Cleveland et al., 1992) o LOWESS (Cleveland, 1981). Veamos un ejemplo con el paquete ggplot2 y la función integrada geom_smooth(), ilustrado en la Figura 3.13.\n\n\nggplot(mpg, aes(displ, hwy)) + \n  geom_point() +\n  geom_smooth(method = \"loess\", formula = 'y ~ x') + \n  facet_wrap(~year)\n\n\n\n\n\n\n\nFigura 3.13: Diagramas de dispersión comparando el cubicaje y la autonomía de diferentes modelos de automóviles en 1999 y 2008.\n\n\n\n\n\n\n\n3.1.3 Relaciones cuantitativo-cualitativo\nEn la Figura 3.14 se muestran los tipos básicos de gráficos para representación de valores numéricos frente a valores de una variable categórica.\n\n\n\n\n\n\nFigura 3.14: Gráficos para representar relaciones entre un atributo cuantitativo y otro categórico. Fuente: (Wilke, 2019).\n\n\n\n\nDiagrama de barras: este tipo de gráfico es sobradamente conocido. Permite representar cifras correspondientes a varias categorías para compararlas entre sí. No obstante, hay algunos aspectos que pueden facilitar su interpretación:\n\nBarras horizontales: cambiar la orientación de las barras puede ser una buena estrategia si estamos comparando muchas categorías y las diferencias entre ellas no son muy grandes. Esto se debe a que nuestra percepción visual de las diferencias entre objetos horizontales es más precisa que cuando los objetos se orientan verticalmente.\nOrdenación de las barras: podemos ordenar las barras en sentido creciente o decreciente para ayudar a nuestra audiencia a identificar rápidamente los casos extremos, siempre y cuando no estemos obligados a ordenar las categorías por algún otro criterio específico.\n\nDotplot (diagrama de puntos): propuesto por W. S. Cleveland (Cleveland, s. f.) para simplificar la representación de la información en un diagrama de barras. Es compatible con la representación de intervalos de confianza y barras de error. Además, permite también comparar resultados entre grupos para cada categoría, tal y como muestra la Figura 3.15, lo que aumenta aún más si cabe su utilidad.\n\n\n\n\n\n\n\nFigura 3.15: Ejemplo de un Cleveland dotplot que compara los ingresos de mujeres y hombres en varias ciudades de EE.UU. Fuente: https://uc-r.github.io/cleveland-dot-plots\n\n\n\nEn este ejemplo, podemos observar que las ciudades se han ordenado de mayor a menor cantidad de ingresos. También se ha utilizado el canal color para distinguir los puntos correspondientes a los ingresos de los hombres respecto a los de las mujeres y se ha añadido una anotación que cuantifica su diferencia positiva o negativa. El subtítulo del gráfico muestra algunas conclusiones principales, con lo que podemos interpretar el gráfico con mayor rapidez.\n\n\n\n\n\n\nConfusión con el término dotplot\n\n\n\nAunque el término dotplot fue propuesto inicialmente por W. S. Cleveland en 1984 y tiene un claro significado para gran parte de la comunidad de visualización de datos (remarcado, en ocasiones, anteponiendo el apellido de su creador), herramientas actuales como ggplot2 incluyen una función geom_dotplot() que no tiene nada que ver con este tipo de gráfico, como podemos comprobar en los ejemplos de la documentación oficial.\nEsta desafortunada ambigüedad no se va a poder corregir fácilmente, puesto que la API de ggplot2 ya está muy consolidada. Para agravar aún más si cabe esta confusión, podemos encontrar el tipo de gráfico dotplot original de Cleveland bajo otros seudónimos, como lollipop plot.\nComo siempre, lo importante es entender bien el concepto y el tipo de gráfico que queremos construir.\n\n\nLa Figura 3.16 muestra gráficos para representar relaciones entre una variable cuantitativa y varias categorías de manera simultánea en la misma imagen.\n\n\n\n\n\n\nFigura 3.16: Gráficos para representar relaciones entre un atributo cuantitativo y varias categorías simultáneamente. Fuente: (Wilke, 2019).\n\n\n\n\nDiagrama de barras agrupado: como el diagrama de barras tradicional, pero añadiendo dentro de cada categoría principal una barra por cada categoría de la segunda variable cualitativa que estamos comparando. Para evitar repetir la etiqueta de los valores de la segunda categoría en cada grupo, normalmente se usa otro canal (color) para distinguirlas, indicando en una leyenda en nombre de la categoría de la segunda variable que corresponde a cada valor del canal.\nDiagrama de barras apiladas (stacked bars): cuando el objetivo es comparar los valores de una subcategoría con los de esa misma subcategoría en otras categorías principales del gráfico, podemos crear un diagrama de barras apilado para comprar más directamente los segmentos de cada subcategoría.\nMapa de calor (heatmap): permite comparar diferentes ítems según los valores de una variable cuantitativa obtenidos para dos variables categóricas simultáneamente. En R se pueden construir un heatmap utilizando varios paquetes, obteniendo tanto gráficos estáticos como interactivos (dinámicos). Un ejemplo se muestra en la Figura 3.17, con una captura estática de un heatmap interactivo para comparar varios países en función de los valores obtenidos en varios índices de medición de nivel de bienestar y desarrollo en cada país. Este heatmap también incorpora un dendongrama en cada margen, ofreciendo pistas adicionales sobre los países más similares entre sí (consulta la referencia para ver el código fuente que genera este gráfico).\n\n\n\n\n\n\n\n\nFigura 3.17: Mapa de calor (heatmap) para comparar varios países según los valores de diferentes índices de bienestar y desarrollo en cada uno de ellos. Fuente: https://www.data-to-viz.com/graph/heatmap.html.\n\n\n\n\n\n\n3.1.4 Proporciones\nLos gráficos básicos para representación de proporciones están resumidos en la Figura 3.18.\n\n\n\n\n\n\nFigura 3.18: Gráficos básicos para representación de proporciones. Fuente: (Wilke, 2019).\n\n\n\n\nDiagrama de sectores (pie chart): otro tipo de gráfico sobradamente conocido y, dicho sea también, muy denostado en la comunidad de visualización de datos por sus dudosas propiedades para reflejar de forma precisa la información que queremos comparar, sobre todo si las categorías tienen porcentajes muy semejantes (es decir, si los sectores tienen tamaños muy parecidos).\nDiagrama de barras (porcentual): en este caso cada barra refleja proporciones (en %) y no valores absolutos de un atributo numérico.\n\nA su vez, la Figura 3.19 muestra distintos tipos de diagramas para representar mútiples conjuntos de proporciones.\n\n\n\n\n\n\nFigura 3.19: Gráficos básicos para representación de múltiples conjuntos de proporciones. Fuente: (Wilke, 2019).\n\n\n\n\nDiagramas de sectores múltiples: cuidado con este tipo de gráfico, puesto que si ya es complicado en ocasiones comparar los sectores en un solo diagrama imaginemos cómo se complica la tarea cuando hay que comparar sectores de varios diagramas de forma simultánea.\nDiagramas de barras agrupados y apilados: son aplicables los mismos comentarios que en el caso de representación de valores absolutos. No obstante, en el caso de las proporciones suele ser más preciso y útil para interpretar el gráfico usar la modalidad de barras apiladas.\nDiagramas de densidades apiladas: ofrecen una solución rápida para comparar proporciones. Sin embargo, tiene dos desventajas. La primera es que usamos demasiada “tinta” para el gráfico. La segunda es que es complicado interpretar la distribución de valores para cualquier categoría excepto la que está en la base del gráfico. Podemos ver un ejemplo de este tipo de gráficos para comprender mejor sus ventajas e inconvenientes.\n\nPor último, la Figura 3.20 muestra gráficos para desglosar proporciones en función de más de una variable categórica a la vez en la misma figura.\n\n\n\n\n\n\nFigura 3.20: Gráficos para representación de proporciones en función de más de una categoría de forma simultánea. Fuente: (Wilke, 2019).\n\n\n\n\nGráfico de mosaico (mosaic plot): permite crear áreas coloreadas para comparar proporciones entre dos o más atributos categóricos a la vez. Si comparamos más de dos variables cualitativas, tendremos que hacer un mosaic plot para cada categoría de la tercera variable. En la Figura 3.21 se presenta un ejemplo de gráfico de mosaico para comparar los porcentajes de respuestas a dos preguntas de un cuestionario.\n\n\n\n\n\n\n\nFigura 3.21: Ejemplo de un gráfico de mosaico creado con el paquete ggmosaic en R. Fuente: &lt;https://cran.r-project.org/web/packages/ggmosaic/vignettes/ggmosaic.html\n\n\n\n\nTreemap: a pesar de su parecido con los gráficos de mosaico, el treemap tiene una diferencia importante, que radica en que representamos datos jerárquicos como un conjunto de rectángulos anidados. Por tanto, sólo es válido para representar proporciones de subcategorías que se unen para formar otra categoría mayor, como vemos en el ejemplo de la Figura 3.22.\n\n\n\n\n\n\n\nFigura 3.22: Ejemplo de un treemap que representa proporciones de varias subcategorías dentro de tres categorías principales. Fuente: https://r-graph-gallery.com/235-treemap-with-subgroups.html.\n\n\n\n\nConjuntos paralelos (parallel sets o alluvial plot): se trata de un gráfico algo más difícil de intrepretar a primera vista, pero de enorme utilidad cuando conseguimos entender su mecánica funcional. Representa el porcentaje de una categoría que va a parar al resto de categorías de otra u otras variables (se pueden añadir más variables a la derecha, pero cada vez es más complicado “seguirle al pista” a los flujos). La Figura 3.23 presenta un ejemplo de este tipo de gráficos, mostrando el desglose de pasajeros del viaje inaugural del Titanic en función de diversos factores: cubierta donde se alojaban, género y rango de edad. El paquete ggalluvial facilita la construcción de este tipo de gráficos en R con ggplot2 (Brunson, 2020).\n\n\n\n\n\n\n\nFigura 3.23: Ejemplo de un alluvial plot para desglosar los pasajeros del viaje inaugural del Titanic según tres posibles factores. Fuente: https://corybrunson.github.io/ggalluvial/\n\n\n\n\n\n3.1.5 Datos espaciales\nLa Figura 3.24 muestra algunos gráficos básicos para representación de datos con dependencias espaciales.\n\n\n\n\n\n\nFigura 3.24: Gráficos básicos para representación de datos espaciales. Fuente: (Wilke, 2019).\n\n\n\n\nMapa: como resulta evidente, la opción más directa es representar datos geolocalizados mediante algún tipo de mapa (político, geográfico, etc.), posiblemente enriquecido con información adicional para proporcionar más contexto. En el Capítulo 8 veremos más detalles, aunque este tipo de gráficos no son el objeto principal de este taller, debido a que requieren gran cantidad de conceptos y herramientas propias de este dominio. Para más información, se recomienda consultar referencias actualizadas y de calidad como https://r.geocompx.org/ (Lovelace et al., 2025) o https://r-spatial.org/book/ (Pebesma & Bivand, 2023).\nChoropleth: es un tipo de mapa en el que se colorean, sombrean o degradan las regiones según los valores de cierto atributo. Tienen un gran poder explicativo, especialmente cuando las unidades espaciales nos resultan familiares, como una región o el mápa político de un país. Un ejemplo se muestra en la Figura 3.25\n\n\n\n\n\n\n\nFigura 3.25: Choropleth que representa los resultados de las elecciones presidenciales en EE.UU. de 2016. Fuente: https://socviz.co/maps.html.\n\n\n\n\nCartograma y artograma de calor (cartogram heatmap): Son gráficos en los que se muestra esquemáticamente los resultados de variables geolocalizadas, sin utilizar los polígonos correspondientes a las regiones reales. Un ejemplo de este tipo de gráficos se muestra en la Figura 3.26.\n\n\n\n\n\n\n\nFigura 3.26: Cartograma que representa esquemáticamente los resultados de las elecciones presidenciaels en EE.UU. de 2016. Fuente: https://socviz.co/maps.html\n\n\n\n\n\n3.1.6 Representación de la incertidumbre\nLa Figura 3.27 muestra varios ejemplos de gráficos que representan márgenes de error en medidas o estimaciones estadísticas.\n\n\n\n\n\n\nFigura 3.27: Gráficos básicos para representación de barras de estimaciones de error. Fuente: (Wilke, 2019).\n\n\n\n\nBarras de error: cuando los diagramas de barras representan valores estadísticos, como media, mediana, desviación típica, etc. es aconsejable añadir barras de error sobre la parte superior de cada barra, para indicar la variabilidad en la estimación. Un ejemplo de esta práctica se ilustra en la Figura 3.28.\n\n\n\n\n\n\nFigura 3.28: Ejemplo de un gráfico de barras que incluye barras de error. Fuente: https://www.data-to-viz.com/caveat/error_bar.html.\n\n\n\nSin embargo, la utilización de barras de error puede ocultar información valiosa al espectador, como se muestra en la Figura 3.29. Vemos que el mismo diagrama de barras con barras de error corresponde con diferentes distribuciones de los datos. Por ese motivo, se desaconseja en muchos casos usar este tipo de diagramas, en favor de la utilización del boxplot, violin plot, swarm plot o alguna otra variante que muestre información adicional sobre la distribución de los datos originales.\n\n\n\n\n\n\nFigura 3.29: Ejemplo de un gráfico de barras que incluye barras de error y corresponde a diferentes distribuciones de datos subyacentes. Fuente: https://www.data-to-viz.com/caveat/error_bar.html.\n\n\n\n\nA su vez, la Figura 3.30 muestra varios ejemplos de gráficos para visualización de la distribución de probabilidad en intervalos de confianza o en modelos (a priori y a posteriori).\n\n\n\n\n\n\nFigura 3.30: Gráficos básicos para representación de estimaciones estadísticas. Fuente: (Wilke, 2019).\n\n\n\nEn este caso, conviene destacar que lo más importante es dejar claro a nuestra audiencia qué representan las bandas o intervalos de confianza, de forma que los resultados se puedan interpretar sin cometer errores.\nPor último, tenemos algunas modalidades para representar bandas de intervalos de confianza en estimaciones gráficas (curvas resultado de ajustes y modelos), que suelen incluir diferentes anchos o gradaciones para indicar diferentes intervalos en el mismo gráfico (c.i. 90%; c.i. 95%, etc.). Varios ejemplos aparecen esquematizados en la Figura 3.31.\n\n\n\n\n\n\nFigura 3.31: Gráficos básicos para representación de intervalos de confianza en estimaciones. Fuente: (Wilke, 2019).\n\n\n\nEl caso más habitual es el de mostrar bandas a amobs lados de una recta o curva estimada a partir de un modelo estadístico ajustado a nuestros datos. El gráfico de la Figura 3.32 muestra cómo se puede implementar con el paquete ggplot2.\n\nlibrary(ggplot2)\n\n# Creamos el gráfico de dispersión y añadimos bandas en azul claro\n# marcando el intervalo de confianza al 95% (opción por defecto)\nggplot(data=mtcars, aes(x=mpg, y=wt)) +\n  geom_point() +\n  geom_smooth(method=lm, color='red', fill='lightblue')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nFigura 3.32: Ilustración de un intervalo de confianza del 95% alrededor de una recta de regresión simple ajustada a una nube de puntos",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Galería de gráficos</span>"
    ]
  },
  {
    "objectID": "03-chart-types.html#árbol-de-decisión-qué-grafico-escojo",
    "href": "03-chart-types.html#árbol-de-decisión-qué-grafico-escojo",
    "title": "3  Galería de gráficos",
    "section": "3.2 Árbol de decisión: ¿qué grafico escojo?",
    "text": "3.2 Árbol de decisión: ¿qué grafico escojo?\nComo conclusión de este capítulo, seguramente podremos pensar que el gran número de tipos de gráficos de entre los que podemos escoger para nuestro propio trabajo es abrumador. Afortunadamente, existen algunas guías que permiten plantearnos unas sencillas preguntas de diseño para orientar nuestra elección, reduciendo al menos el alcance de la búsqueda a un subconjunto de tipos de gráficos que mejor se adapte a nuestro problema particular.\nEl sito web https://www.data-to-viz.com/ publica una imagen en alta resolución (que se puede recibir por correo-e), en la que se resume un sencillo diagrama de decisión para orientar nuestra selección del gráfico más apropiado. En todo caso, esperamos que los comentarios y orientaciones que hemos incluido en este capítulo permitan a futuros creadores/as de gráficos seleccionar con criterios las herramientas a emplear.\n\n\n\n\nBrunson, J. C. (2020). ggalluvial: Layered Grammar for Alluvial Plots. Journal of Open Source Software, 5(49), 2017. https://doi.org/10.21105/joss.02017\n\n\nCleveland, W. S. (s. f.). Graphical methods for data presentation: Full scale breaks, dot charts, and multibased logging. The American Statistician, 38(4), 270-280.\n\n\nCleveland, W. S. (1981). LOWESS: A program for smoothing scatterplots by robust locally weighted regression. American Statistician, 35(1), 54.\n\n\nCleveland, W. S., Grosse, E., & Shyu, W. M. (1992). Local regression models. En J. M. Chambers & T. J. Hastie (Eds.), Statistical Models in S. Wadsworth & Brooks/Cole.\n\n\nLovelace, R., Nowosad, J., & Muenchow, J. (2025). Geocomputation with R. Chapman & Hall. https://r.geocompx.org/\n\n\nPebesma, E., & Bivand, R. (2023). Spatial Data Science with Applications in R. Chapman & Hall. https://r-spatial.org/book/\n\n\nTukey, J. W. (1977). Exploratory Data Analysis (1.ª ed.). Addison-Wesley Pub.\n\n\nWilke, C. O. (2019). Fundamentals of Data Visualization. O’Reilly Media. https://clauswilke.com/dataviz/",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Galería de gráficos</span>"
    ]
  },
  {
    "objectID": "04-grammar.html",
    "href": "04-grammar.html",
    "title": "4  Gramática de gráficos",
    "section": "",
    "text": "4.1 Origen y propósito\nWilkinson (2005) introdujo el concepto de gramática de gráficos (grammar of graphics) para organizar y estructurar los elementos de diseño y composición de gráficos para visualización de datos. Desde su publicación, este paradigma de referencia ha influenciado el diseño e implementación de numerosos paquetes y librerías para visualización de datos, incluyendo el paquete ggplot2 (Wickham, 2010).\nLa Tabla 4.1 muestra la correspondencia entre los elementos de la gramática de gráficos propuesta por L. Wilkinson y la gramática por capas implementada por H. Wickham en su paquete ggplot2.\nVeamos primero algunos de los elementos de la gramática de gráficos original que deben ser especificados para componer un gráfico (Wilkinson, 2005):\nNo obstante, en el libro de Wilkison también se mencionan otros elementos constructivos, tales como atributos estéticos, geometrías o estadísticos, que también aparecen en la propuesta de H. Wickham.",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Gramática de gráficos</span>"
    ]
  },
  {
    "objectID": "04-grammar.html#origen-y-propósito",
    "href": "04-grammar.html#origen-y-propósito",
    "title": "4  Gramática de gráficos",
    "section": "",
    "text": "Tabla 4.1: Example of grid table.\n\n\n\n\n\n\n\n\n\n\nGPL (Wilkinson, 2005)\nggplot2 (Wickham, 2010)\n\n\n\n\nDATA\nDefaults\n\n\nTRANS\nData Mapping\n\n\nELEMENT\n\nLayer\n\nData\nMapping\nGeom\nStat\nPosition\n\n\n\n\nSCALE GUIDE\nScale\n\n\nCOORD\n\nCoord\n\n\n\nFACET\n\nFacet\n\n\n\n\n\n\n\n\n\nDatos: conjunto de operaciones sobre los datos que generar variables (atributos) de los datasets que van a ser representados gráficamente.\nTransformaciones (abreviado como trans): operaciones aplicadas sobre las variables antes de su inclusión en el gráfico (por ejemplo, cálculo de un ranking, ordenación, etc.).\nElementos: componentes gráficos (puntos, líneas, …) y sus atributos estéticos (color, tamaño,…).\nEscala: transformaciones aplicadas a la escala de representación de los datos como, por ejemplo, cambiar a escala logarítmica.\nGuías: una o más guías de interpretación (ejes, leyenda, …).\nSistema de coordenadas (abreviado como coord): elección de un sistema de coordenadas (cartesianas, polares, etc.).\nFacetas: son cuadros en los que componemos varios graficos de forma que conjuntamente permitan comparar unos con otros.",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Gramática de gráficos</span>"
    ]
  },
  {
    "objectID": "04-grammar.html#una-implementación-por-capas",
    "href": "04-grammar.html#una-implementación-por-capas",
    "title": "4  Gramática de gráficos",
    "section": "4.2 Una implementación por capas",
    "text": "4.2 Una implementación por capas\nLa principal novedad introducida por la implementación de H. Wickham de este concepto en su paquete ggplot2 es la organización de los elementos para componer el gráfico en una estructura por capas, altamente flexible y versátil. La Figura 4.1 muestra un esquema conceptual de los diferentes elementos que veremos en el Capítulo 5.\n\n\n\n\n\n\nFigura 4.1: Representación esquemática de la implementación de una gramática de gráficos estructurada en capas dentro del paquete ggplot2.\n\n\n\nEsta estructura permite construir rápidamente incluso gráficos de elevada complejidad que mezclan o sobreponen diferentes componentes para representar la información. El hecho de que el paquete ggplot2 se haya intentando portar o conectar (mediante wrappers) al lenguaje Python en múltiples ocasiones da buena cuenta de las ventajas de dicho paquete respecto de otras opciones.",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Gramática de gráficos</span>"
    ]
  },
  {
    "objectID": "04-grammar.html#otras-librerías-y-paquetes",
    "href": "04-grammar.html#otras-librerías-y-paquetes",
    "title": "4  Gramática de gráficos",
    "section": "4.3 Otras librerías y paquetes",
    "text": "4.3 Otras librerías y paquetes\nExisten otros paquetes en R para realizar gráficos. Uno de los más destacados y que, en su momento, también incorporó avances importantes y potentes (como el soporte para crear facetas) es lattice (Sarkar, 2008). Sin embargo, desde su aparición ggplot2 no ha cesado de ganar adeptos y, a día de hoy, es prácticamente la opción de referencia en R para creación de gráficos atractivos e informativos.\n\n4.3.1 Otros lenguajes: Python\n\nExiste un paquete en Python llamado lets-plot (https://lets-plot.org/python/index.html), que ha portado gran parte de la funcionalidad y la API de ggplot2 al entorno Python (no hay más que echar una rápida ojeada a la documentación para comprobar que el abanico de opciones que ofrece es muy amplio).\nOtro proyecto muy interesante y, curiosamente, también bastante desconocido para una parte de los programadores en Python es Vega-Altair, o simplemente altair. Es una biblioteca de visualización declarativa para Python que se construye sobre la gramática de gráficos del proyecto Vega-Lite. El objetivo principal de esta gramática es simplificar la creación de muchos elementos dinámicos e interactivos pensados, esencialmente, para mostrarse en documentos HTML. De hecho, el proyecto proporciona un editor de gráficos (Vega Editor), neutral a cualquier lenguaje de programación, en el que podemos construir nuestro gráfico para luego integrarlo en un lenguaje que cuente con un paquete o librería que pueda interpretar esta gramática. El proyecto fue creado y está liderado por el Interactive Data Lab que dirige el especialista en visualización de datos Jeffrey Heer.\n\n\n\n\n\n\n\nEl zoo de las visualizaciones de datos\n\n\n\nEl profesor Heer es uno de los mayores especialistas en visualización de datos a nivel mundial y una de las personas que más ha contribuido al avance de este área de conocimiento en los últimos 15 años. Uno de sus mejores artículos, lectura imprescindible para cualquiera que quiera adquirir una idea precisa de la amplitud del campo de la visualización de datos, es el artículo “A Tour Through de Visualization Zoo” (Heer et al., 2010), disponible en este enlace: https://homes.cs.washington.edu/~jheer/files/zoo/; o en la versión oficial publicada en ACM Queue.\n\n\n\n\n\n\n\n\nEl paquete altair en R\n\n\n\nAl igual que ocurre con ggplot2, pero en sentido inverso, el proyecto Vega-Altair también se está volviendo accesible en R, gracias al paquete altair, que emplea otro paquete R llamado reticulate para generar una interfaz a la API de Vega-Altair en Python. El paquete reticulate no suele introducir grandes retardos para hacer la “traducción automática” entre las dos APIs, por lo que esta opción parece bastante atractiva si queremos explorar las posibilidades que ofrece la gramática de Vega-Lite en R.\nEso sí, hay que tener cuidado porque, por ahora, la versión de Altair soportada es la 4.2.0, por lo que conviene instalar exactamente dicha versión de Vega-Altair en Python en un entorno virtual y usando un gestor de paquetes como pip o conda.\n\n\n\nlibrary(\"altair\")\n\nvega_data &lt;- import_vega_data()\n\nchart &lt;- \n  alt$Chart(vega_data$cars())$\n  mark_point()$\n  encode(\n    x = \"Horsepower:Q\",\n    y = \"Miles_per_Gallon:Q\",\n    color = \"Origin:N\"\n  )\n\nchart\n\n\n\n\n\n\n\nFigura 4.2: Ejemplo de un gráfico generado con el paquete altair en R.\n\n\n\n\n\n\n\nHeer, J., Bostock, M., & Ogievetsky, V. (2010). A Tour through the Visualization Zoo: A survey of powerful visualization techniques, from the obvious to the obscure. Queue, 8(5), 20--30. https://doi.org/10.1145/1794514.1805128\n\n\nSarkar, D. (2008). Lattice: Multivariate Data Visualization with R. Springer. http://lmdvr.r-forge.r-project.org\n\n\nWickham, H. (2010). A Layered Grammar of Graphics. Journal of Computational and Graphical Statistics, 19(1), 3-28. https://doi.org/10.1198/jcgs.2009.07098\n\n\nWilkinson, L. (2005). The Grammar of Graphics (2.ª ed.). Springer. https://doi.org/10.1007/0-387-28695-0",
    "crumbs": [
      "Fundamentos",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Gramática de gráficos</span>"
    ]
  },
  {
    "objectID": "05-ggplot2.html",
    "href": "05-ggplot2.html",
    "title": "5  El paquete ggplot2",
    "section": "",
    "text": "5.1 Tidy data\nlibrary(tidyverse)",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>El paquete `ggplot2`</span>"
    ]
  },
  {
    "objectID": "05-ggplot2.html#tidy-data",
    "href": "05-ggplot2.html#tidy-data",
    "title": "5  El paquete ggplot2",
    "section": "",
    "text": "5.1.1 Datos de ejemplo\nUtilizaremos ejemplos del paquete agriTutorial (Rodney Edmondson et al., 2020), que incluye conjuntos de datos y ejemplos de modelos sobre exprimentos en agricultura. También usaremos el paquete R agridat (Wright, 2024), que contiene conjuntos de datos provenientes de publicaciones relacionadas con la agricultura, incluyendo cultivos de campo, cultivos arbóreos o estudios con animales, entre otros.\nPaquete agriTutorial\n\nlibrary(agriTutorial)\nlibrary(agridat)\n\n\ngreenrice: Datos de un experimento sobre absorción de nitrogeno (N), medido en g/maceta en un experimento de doble factor en invernadero (Gomez & Gomez, 1984). Se considera la duración del estrés hídrico (W) y el nivel de aplicación de nitrógeno. El experimento se llevó a cabo con cuatro niveles de estrés hídrico (0, 10, 20 y 40 días) como tratamientos de parcela principal (main-plot treatment) y cuatro dosis de nitrógeno (0, 90, 180 y 270 kg/ha) como tratamientos de subparcela (sub-plot treatment). Las parcelas principales se aleatorizaron en cuatro bloques completos (cada bloque incluye todos las posibles combinaciones de tratamientos).\n\n\ndata(greenrice)\nstr(greenrice)\n\n'data.frame':   64 obs. of  5 variables:\n $ uptake   : num  1.033 0.506 0.692 0.254 0.154 ...\n $ W        : num  10 10 10 10 40 40 40 40 0 0 ...\n $ N        : num  270 90 180 0 90 180 0 270 0 180 ...\n $ Replicate: Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 1 1 1 1 1 1 1 1 1 ...\n $ Main     : Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 1 1 1 2 2 2 2 3 3 ...\n\n\n\nrice: Datos de un experimento con tres prácticas de gestión (minimum, optimum, intensive), cinco cantidades distintas de fertilizante de nitrógeno (N) (0, 50, 80, 110, 140 kg/ha) y tres variedades de planta (V1, V2, V3) (Gomez & Gomez, 1984). El experimento sigue un diseño de parcelas divididas (split-plot design), donde la variedad de planta y el tipo de gestión son factores de tratamiento cualitativos y la cantidad de fertilizante de nitrógeno es un factor de tratamiento cuantitativo.\n\n\ndata(rice)\nstr(rice)\n\n'data.frame':   135 obs. of  8 variables:\n $ yield     : num  3.32 6.1 5.36 3.77 5.1 ...\n $ nrate     : num  0 0 0 0 0 0 0 0 0 50 ...\n $ nitrogen  : Factor w/ 5 levels \"0\",\"50\",\"80\",..: 1 1 1 1 1 1 1 1 1 2 ...\n $ Replicate : Factor w/ 3 levels \"R1\",\"R2\",\"R3\": 1 1 1 1 1 1 1 1 1 1 ...\n $ management: Factor w/ 3 levels \"Minimum\",\"Optimum\",..: 1 1 1 2 2 2 3 3 3 1 ...\n $ variety   : Factor w/ 3 levels \"V1\",\"V2\",\"V3\": 1 2 3 1 2 3 1 2 3 1 ...\n $ Main      : Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: 1 1 1 1 1 1 1 1 1 2 ...\n $ Sub       : Factor w/ 3 levels \"1\",\"2\",\"3\": 1 1 1 2 2 2 3 3 3 1 ...\n\n\nPaquete agridat\n\nholland.arthropods: Muestreo de diferentes especies de artrópodos presentes en una malla de 30m x 30m de un campo de trigo cerca de Wimborne, Dorest (Reino Unido). Los muestreos se realizaron en 6 fechas entre junio/julio de 1996. Los conteos para cada especie de artrópodo se agregaron sobre los 6 días totales (Holland et al., 1999).\n\n\ndata(holland.arthropods)\nstr(holland.arthropods)\n\n'data.frame':   63 obs. of  8 variables:\n $ row          : int  1 1 1 1 1 1 1 2 2 2 ...\n $ col          : int  1 2 3 4 5 6 7 1 2 3 ...\n $ n.brevicollis: int  6 3 3 2 1 2 1 10 12 1 ...\n $ linyphiidae  : int  67 114 59 80 102 169 63 106 64 41 ...\n $ collembola   : int  85 30 56 36 110 38 19 65 38 260 ...\n $ carabidae    : int  35 24 18 9 13 14 14 18 32 14 ...\n $ lycosidae    : int  13 22 20 32 28 12 43 28 8 3 ...\n $ weedcover    : int  42 23 17 21 12 15 13 27 9 10 ...",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>El paquete `ggplot2`</span>"
    ]
  },
  {
    "objectID": "05-ggplot2.html#anatomía-de-un-gráfico-con-ggplot2",
    "href": "05-ggplot2.html#anatomía-de-un-gráfico-con-ggplot2",
    "title": "5  El paquete ggplot2",
    "section": "5.2 Anatomía de un gráfico con ggplot2",
    "text": "5.2 Anatomía de un gráfico con ggplot2\nEl paquete ggplot2 sigue los principios de la gramática de gráficos que hemos visto en el Capítulo 4, de forma que nos permite construir un gráfico paso a paso. Para ello se empieza por utilizar la función ggplot():\n\nIndicamos a la función ggplot() los datos que vamos a representar. \nIndicamos a ggplot() qué relaciones queremos visualizar. \nElegimos cómo queremos representar gráficamente las relaciones en nuestros datos que hemos indicado en el paso anterior. \nSi es necesario, superponemos más elementos gráficos (objetos geométricos o geoms), añadiéndolas a nuestro gráfico una a una.\nIncluimos funciones adicionales para ajustar transformar los datos, ajustar o cambiar escalas, añadir etiquetas y título, marcas en los ejes, capas adicionales, etc.\n\nEl argumento data = ....El argumento mapping = aes(...).Elegimos una función geom_...() que determina el tipo de gráfico o elemento gráfico.Veamos estós datos sobre un esquema para hacernos una idea más clara del aspecto que tendrá nuestro código.\n1ggplot(data = &lt;DATOS&gt;,\n       mapping = aes(&lt;CONEXIONES&gt;)) +\n2  geom_...(...) +\n3  stat_...(...) +\n4  &lt;FUNCIONES DE ESCALA Y GUÍAS&gt; +\n5  &lt;SISTEMAS COORDENADOS&gt; +\n6  &lt;FACETAS&gt; +\n7  &lt;TEMA&gt;\n\n1\n\nIndicamos qué datos vamos a utilizar y como conectamos esos datos (mapeo) con los elementos estéticos. Esta parte es obligatoria.\n\n2\n\nAñadimos uno o varios objetos geométricos para representar los datos.\n\n3\n\nTransformamos los datos (funciones stat_...()), normalmente resumiéndolos de algún modo.\n\n4\n\nAjustamos el mapeo de los datos a los elementos estéticos, modificando la escala de representación o añadiendo elementos de guía para intepretar el gráfico (marcas en ejes, leyenda, etc.).\n\n5\n\nConfiguramos el sistema coordenado de representación (por defecto se usan coordenadas cartesianas): intercambio de ejes X e Y (función coord_flip()), uso de coordenadas polares (coord_polar()), etc.\n\n6\n\nDecidimos si queremos desglosar el gráfico en varios paneles (facets) para presentar simultáneamente varios subgráficos (como hemos visto, útil para comparar entre grupos, evolución temporal y en otros casos).\n\n7\n\nPor último, podemos elegir un tema preconfigurado que adapta el aspecto de muchos de los elementos del gráfico para conseguir un resultado final más armonizado.",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>El paquete `ggplot2`</span>"
    ]
  },
  {
    "objectID": "05-ggplot2.html#datos-y-elementos-estéticos",
    "href": "05-ggplot2.html#datos-y-elementos-estéticos",
    "title": "5  El paquete ggplot2",
    "section": "5.3 Datos y elementos estéticos",
    "text": "5.3 Datos y elementos estéticos\nLos dos primeros pasos en nuestro gráfico serán indicar qué datos queremos considerar y qué elementos estéticos vamos a enlazar con dichos datos. En el siguiente ejemplo, guardamos en la variable p el resultado de los dos primeros pasos del proceso.\nCuando los mínimos elementos necesarios para representar el gráfico están ya configurados, la invocación directa de la variable p hace aparecer el gráfico.\nVamos con el primer paso: indicar qué dataset queremos usar.\n\np &lt;- ggplot(data = holland.arthropods)\np\n\n\n\n\n\n\n\nFigura 5.1: Cuando sólo indicamos los datos que vamos a usar el gráfico todavía no muestra ningún elemento.\n\n\n\n\n\nAhora, añadimos en el segundo paso las conexiones de los datos con los elementos estéticos.\n\np &lt;- ggplot(data = holland.arthropods,\n            mapping = aes(x = lycosidae,\n                          y = weedcover))\np\n\n\n\n\n\n\n\nFigura 5.2: Tras incorporar el mapeo entre datos y elementos gráficos ahora se muestran las variables asociadas a cada eje.\n\n\n\n\n\nEn la Figura 5.2 podemos ver cómo las variables (atributos) asociadas al eje X y al eje Y de nuestro gráfico, mediante la función aes(), es lo único que se muestra. La zona principal de representación todavía no muestra ningún elemento, porque aún no hemos especificado de qué forma queremos representar la relación entre la variable en X y la que está en Y.",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>El paquete `ggplot2`</span>"
    ]
  },
  {
    "objectID": "05-ggplot2.html#objetos-geométricos",
    "href": "05-ggplot2.html#objetos-geométricos",
    "title": "5  El paquete ggplot2",
    "section": "5.4 Objetos geométricos",
    "text": "5.4 Objetos geométricos\nEl paquete ggplot2 incluye una larga lista de funciones de objetos geométricos (abreviados como geom_...()) para añadir a nuestros gráficos.\nContinuando con nuestro ejemplo, en el paso 3 del proceso de construcción añadimos un geom sencillo: una nube de puntos para crear un diagrama de dispersión básico (scatterplot) con la función geom_point(). El resultado se muestra en la Figura 5.3. Observamos que, ahora sí, se muestra un punto en color negro en cada cruce de valores de los atributos numéricos representados en los ejes X e Y.\n\np &lt;- p + geom_point()\np\n\n\n\n\n\n\n\nFigura 5.3: Añadimos al gráfico un objeto geométrico: una nube de puntos.\n\n\n\n\n\nEs posible agregar más de un objeto geométrico al mismo gráfico, siempre y cuando sean compatibles. Continuando con nuestro caso de ejemplo, agregamos sobre el diagrama de dispersión una línea suavizada que muestra la tendencia global, junto con una banda en color gris que la rodea, indicando el error estándar de la curva estimada. El resultado se ilustra en la Figura 5.4.\n\np &lt;- p + geom_smooth(method = 'loess', formula = y ~ x)\np\n\n\n\n\n\n\n\nFigura 5.4: Añadimos al gráfico otro objeto geométrico: una curva suavizada para ver la tendencia global.",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>El paquete `ggplot2`</span>"
    ]
  },
  {
    "objectID": "05-ggplot2.html#escalas",
    "href": "05-ggplot2.html#escalas",
    "title": "5  El paquete ggplot2",
    "section": "5.5 Escalas",
    "text": "5.5 Escalas\nLas funciones de escala nos permiten controlar diversos elementos que controlan aspectos importantes de la visualización, como:\n\nEsclas de representación, por ejemplo, para aplicar transformaciones a los datos.\nLímites de representación del gráfico en cada coordenada.\nAcercamiento de la imagen (zooming in).\nMarcas principales en los ejes (breaks).\nMarcas secundarias en los ejes (minor breaks).\nEtiquetas.\nUso de escalas de representación personalizadas para casos especiales (escala de fecha y hora, escala discreta, agrupamiento de datos por intervalos o bins, unidades monetarias, etc.).\nAjuste de las escalas de color (cuando mapeamos los valores de un atributo a una paleta de colores o gradación).\nLeyendas del gráfico.\nForma y tamaño de los símbolos.\nTipo y anchura de las líneas.\n\nEn nuestro caso de ejemplo, podemos ver el efecto que produce cambiar a una escala logarítmica (transformación log10 a nuestros datos de ambos ejes).\n\np &lt;- p + scale_x_log10() + scale_y_log10()\np\n\n\n\n\n\n\n\nFigura 5.5: Cambiamos la escala para aplicar a los datos una transformación log10.",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>El paquete `ggplot2`</span>"
    ]
  },
  {
    "objectID": "05-ggplot2.html#etiquetas-y-título",
    "href": "05-ggplot2.html#etiquetas-y-título",
    "title": "5  El paquete ggplot2",
    "section": "5.6 Etiquetas y título",
    "text": "5.6 Etiquetas y título\n\np &lt;- p + labs(x = \"Lycosidae (conteo)\", y = \"Weedcover (conteo)\",\n    title = \"Artrópodos presentes en campo de trigo\",\n    subtitle = \"Agregación de 6 fechas; junio/julio 1996\", \n    caption = \"Ubicación: Wimborne, Dorest (Reino Unido)\\nDiseño: Malla de 30m x 30m\"\n    )\np\n\n\n\n\n\n\n\nFigura 5.6: Añadimos títulos y personalizamos etiquetas de los ejes.",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>El paquete `ggplot2`</span>"
    ]
  },
  {
    "objectID": "05-ggplot2.html#anotaciones",
    "href": "05-ggplot2.html#anotaciones",
    "title": "5  El paquete ggplot2",
    "section": "5.7 Anotaciones",
    "text": "5.7 Anotaciones\nEn el capítulo 8 del libro de referencia sobre ggplot 2 (Wickham et al., 2024) se muestran varias funciones de este paquete y varios paquetes adicionales que permiten añadir anotaciones de todo tipo en nuestros gráficos: texto, fórmulas, etiquetas, etc. En ocasiones, algunos paquetes, como directlabels, ofrecen incluso etiquetado automático de los grupos de datos (según los valores de un atributo categórico).\nLa Figura 5.7 muestra un ejemplo de cuatro anotaciones añadidas manualmente a nuestro gráfico para marcar la ubicación de otros tantos casos atípicos sobre el diagrama de dispersión.\n\nlabel &lt;- data.frame(\n  lycosidae = c(5.7, 5.7, 45, 70), \n  weedcover = c(1, 2, 4,69), \n  label = c(\"outlier 1\", \"outlier 2\", \"outlier 3\", \"outlier 4\")\n)\n\np + geom_label(data = label, aes(label = label))\n\n\n\n\n\n\n\nFigura 5.7: Añadimos elementos de anotación automáticos.",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>El paquete `ggplot2`</span>"
    ]
  },
  {
    "objectID": "05-ggplot2.html#temas",
    "href": "05-ggplot2.html#temas",
    "title": "5  El paquete ggplot2",
    "section": "5.8 Temas",
    "text": "5.8 Temas\nPor último, los temas nos permiten aplicar un conjunto de parámetros de configuración estéticos ya predefinidos y que dotan al gráfico de un aspecto homogéneo y estilo particular. Además, se puede utilizar la función theme() para crear nuestros propios temas personalizados, combinando las configuraciones que nos parezcan más adecuadas, o para modificar los parámetros de muchos elementos del gráfico.\np + theme_gray()\np + theme_bw()\np + theme_linedraw()\np + theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n(a) theme_gray() (opción por defecto)\n\n\n\n\n\n\n\n\n\n\n\n(b) theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) theme_linedraw()\n\n\n\n\n\n\n\n\n\n\n\n(d) theme_minimal()\n\n\n\n\n\n\n\nFigura 5.8: Comprobamos cómo cambia la figura al utilizar varios temas predeterminados de ggplot2.\n\n\n\nAdemás de los temas estándar ya incluidos en ggplot2, existen algunos temas adicionales desarrollados por la comunidad o disponibles en otros paquetes. Un ejemplo es el paquete de extensión ggthemes, que incluye ejemplos de temas inspirados en publicaciones y blogs conocidos como The Economist o FiveThirtyEight.\n\nlibrary(ggthemes)\np + theme_economist() + scale_colour_economist()\n\n\n\n\n\n\n\nFigura 5.9: Ejemplo de uso del tema inspirado en los gráficos de The Economist, incluido en el paquete ggthemes.",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>El paquete `ggplot2`</span>"
    ]
  },
  {
    "objectID": "05-ggplot2.html#extensiones-de-ggplot2",
    "href": "05-ggplot2.html#extensiones-de-ggplot2",
    "title": "5  El paquete ggplot2",
    "section": "5.9 Extensiones de ggplot2",
    "text": "5.9 Extensiones de ggplot2\nEl paquete ggplot2 se ha convertido en una herramienta de visualización de datos tan popular que han surgido bastantes paquetes que extienden su funcionalidad de diversas maneras. Algunos de ellos están recogidos en una lista de extensiones oficiales de ggplot2. Un ejemplo de esta lista es el paquete ggthemes que hemos mencionado en la sección anterior, pero hay más. Algunas de las más útiles son:\n\nggraph: Incluye diversos geoms para dibujar gráficos para datos de redes y grafos, por ejemplo, en combinación con el paquete igraph.\nggspectra: Incluye stats, geoms y anotaciones para espectros lumínicos, manejados en el paquete photobiology.\nggradar: Extensión que permite crear gráficos de tipo radar, integrados con el resto de componentes de ggplot2.\nggtree: Ofrece herramientas para visualización de árboles filogenéticos.\n\nLa Figura 5.10 muestra ejemplos de gráficos creados con cada uno de estos paquetes de extensión de ggplot2. Se recomienda revisar la documentación del resto de extensiones para descubrir otras herramientas que puedan ser de utilidad (etiquetado de puntos, geoms adicionales, etc.).\n\n\n\n\n\n\n\n\n\n\n\n(a) gggraph\n\n\n\n\n\n\n\n\n\n\n\n(b) ggspectra\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) ggradar\n\n\n\n\n\n\n\n\n\n\n\n(d) ggtree\n\n\n\n\n\n\n\nFigura 5.10: Ejemplos de gráficos creados con cuatro paquetes de extensión de ggplot2.\n\n\n\n\n5.9.1 Extensiones adicionales\nAdemás de las extensiones que figuran en el listado anterior, hay otros paquetes que también incluyen funciones interesantes que extienden las herramientas básicas de ggplot2.\n\nggstatsplot: una de las extensiones más populares y potentes para ggplot2 es esta, que permite crear gráficos muy sofisticados y, además, acompañados de detalles y resultados de nuestros modelos estadísticos (Patil, 2021). Veamos un primer ejemplo en la Figura 5.11.\n\n\nlibrary(ggstatsplot)\n\nYou can cite this package as:\n     Patil, I. (2021). Visualizations with statistical details: The 'ggstatsplot' approach.\n     Journal of Open Source Software, 6(61), 3167, doi:10.21105/joss.03167\n\nggscatterstats(data = mtcars, x = hp, y = mpg)\n\nRegistered S3 method overwritten by 'ggside':\n  method from   \n  +.gg   ggplot2\n\n\n`stat_xsidebin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_ysidebin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nFigura 5.11: Gráfico de regresión simple con bandas del C.I. (95%), que incluye histogramas marginales de cada atributo, coeficiente de correlación, p-valor y tamaño de la muestra. Fuente: https://r-graph-gallery.com/package/ggstatsplot.html.\n\n\n\n\n\nOtro buen ejemplo de gráfico de calidad listo para publicar con este paquete es el mostrado en la\n@fig-ggstatsplot-betweenstats, que muestra una representación gráfica y los resultados estadísticos\nde varios test comparando la diferencia de medias entre grupos.\n\nggbetweenstats(\n  data = dplyr::filter(\n    movies_long,\n    genre %in% c(\"Action\", \"Action Comedy\", \"Action Drama\", \"Comedy\")\n  ),\n  x = genre,\n  y = rating,\n  title = \"IMDB rating by film genre\",\n  xlab = \"Genre\",\n  ylab = \"IMDB rating (average)\"\n)\n\n\n\n\n\n\n\nFigura 5.12: Violín plots paralelos, que incluyen distribución de puntos (con jitter), boxplot integrado y resultados adicionales de tests estadísticos de diferencias entre medias de los distintos grupos. Fuente: Doc. ggstatsplot.\n\n\n\n\n\nEl paquete `ggstatsplot` también incluye muchas funciones para automatizar el resumen de resultados\nde modelos de regresión, tanto frecuentistas como bayesianos, con un total de \n[235 modelos soportados](https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/ggcoefstats.html#supported-models).\nVeremos algunos ejemplos de estas funciones en el @sec-graphs-model-eval.\n\npatchwork: permite componer fácilmente parrillas de gráficos con diferentes configuraciones a partir de gráficos individuales creados con ggplot2. Además, usa una sintaxis bastante sencilla y directa, puesto que el operador + coloca un gráfico junto a otro, mientras que los operadores | y / construyen una rejilla en dirección horizontal o vertical, respectivamente. La figura Figura 5.13 ilustra con un ejemplo con código cómo funciona este paquete. Se recomienda encarecidamente consultar la página de documentación de patchwork para conocer más detalles y ejemplos.\n\n\nlibrary(ggplot2)\nlibrary(patchwork)\n\np1 &lt;- ggplot(mtcars) + geom_point(aes(mpg, disp))  # Primer gráfico\np2 &lt;- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear)) # Segundo gráfico\n\np3 &lt;- ggplot(mtcars) + geom_smooth(aes(disp, qsec),\n                                   method = 'loess',\n                                   formula = 'y ~ x')\np4 &lt;- ggplot(mtcars) + geom_bar(aes(carb))\n\n(p1 | p2 | p3) /\n      p4\n\n\n\n\n\n\n\nFigura 5.13: Ejemplo de funcionamiento del paquete patchwork para componer conjuntos de gráficos creados con ggplot2.\n\n\n\n\n\n\nGGally: otro paquete tremendamente potente, que proporciona funciones para creación automática de gráficos con distintos fines: exploración de datos, gráficos bivariantes, evaluación de modelos, etc. Veremos algunos ejemplos de este paquete en el Capítulo 6. Un ejemplo muy habitual y de gran utilidad es la función ggpairs(), que construye una matriz para comparación de datos multivariantes por parejas, tal y como muestra la Figura 5.14.\n\n\nlibrary(GGally)\n\nRegistered S3 method overwritten by 'GGally':\n  method from  \n  +.gg   ggside\n\npm &lt;- ggpairs(tips, mapping = aes(color = sex), columns = c(\"total_bill\", \"time\", \"tip\"))\npm\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nFigura 5.14: Ejemplo de una matriz de graficos comparativos entre parejas de atributos en un conjunto de datos multivariante, creada con ggpairs().\n\n\n\n\n\n\nggpubr: por último, el paquete ggpubr incluye una serie de funciones para facilitar la composición de gráficos orientados a publicaciones científicas. La Figura 5.15 muestra un ejemplo con la función ggboxplot(), para crear boxplots paralelos que, además, muestren información sobre contrastes de hipótesis sobre si las diferencias entre las medias de los grupos son estadísticamente significativas.\n\n\nlibrary(ggpubr)\ndata(\"ToothGrowth\")\ndf &lt;- ToothGrowth\n\n# Especificamos las comparaciones que se mostrarán\np &lt;- ggboxplot(df, x = \"dose\", y = \"len\",\n                color = \"dose\", palette =c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n                add = \"jitter\", shape = \"dose\")\nmy_comparisons &lt;- list( c(\"0.5\", \"1\"), c(\"1\", \"2\"), c(\"0.5\", \"2\") )\np + stat_compare_means(comparisons = my_comparisons)+ # Añadir p-valores de comparaciones\n  stat_compare_means(label.y = 50)  # Añadir contraste global diferencia entre medias\n\nWarning in wilcox.test.default(c(4.2, 11.5, 7.3, 5.8, 6.4, 10, 11.2, 11.2, :\ncannot compute exact p-value with ties\n\n\nWarning in wilcox.test.default(c(4.2, 11.5, 7.3, 5.8, 6.4, 10, 11.2, 11.2, :\ncannot compute exact p-value with ties\n\n\nWarning in wilcox.test.default(c(16.5, 16.5, 15.2, 17.3, 22.5, 17.3, 13.6, :\ncannot compute exact p-value with ties\n\n\n\n\n\n\n\n\nFigura 5.15: Ejemplo de un gráfico con boxplots paralelos y contraste de hipótesis sobre diferencias entre medias de los grupos.",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>El paquete `ggplot2`</span>"
    ]
  },
  {
    "objectID": "05-ggplot2.html#taller-práctico-1-construcción-de-gráficos-paso-a-paso",
    "href": "05-ggplot2.html#taller-práctico-1-construcción-de-gráficos-paso-a-paso",
    "title": "5  El paquete ggplot2",
    "section": "5.10 Taller práctico 1: construcción de gráficos paso a paso",
    "text": "5.10 Taller práctico 1: construcción de gráficos paso a paso\n\n\n\n\nGomez, K. A., & Gomez, A. A. (1984). Statistical Procedures for Agricultural Research. John Wiley & Sons.\n\n\nHolland, J. M., Perry, J. N., & Winder, L. (1999). The within-field spatial and temporal distribution of arthropods within winter wheat. Bulletin of Entomological Research, 89, 499-513. https://doi.org/10.1017/S0007485399000656\n\n\nPatil, I. (2021). Visualizations with statistical details: The ’ggstatsplot’ approach. Journal of Open Source Software, 6(61), 3167. https://doi.org/10.21105/joss.03167\n\n\nRodney Edmondson, Hans-Peter Piepho, & Muhammad Yaseen. (2020). agriTutorial: Tutorial Analysis of Some Agricultural Experiments .\n\n\nWickham, H., Navarro, D., & Pedersen, T. L. (2024). gglot2: Elegant Graphics for Data Analysis (3 ed.). Versión online (en progreso). https://ggplot2-book.org/\n\n\nWright, K. (2024). agridat: Agricultural Datasets. https://CRAN.R-project.org/package=agridat",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>El paquete `ggplot2`</span>"
    ]
  },
  {
    "objectID": "06-models.html",
    "href": "06-models.html",
    "title": "6  Gráficos para evaluación de modelos",
    "section": "",
    "text": "6.1 Evaluación y diagnóstico de modelos\nExisten diversas herramientas que nos permiten generar gráficas de evaluación de modelos estadísticos y algoritmos en R.",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Gráficos para evaluación de modelos</span>"
    ]
  },
  {
    "objectID": "06-models.html#evaluación-y-diagnóstico-de-modelos",
    "href": "06-models.html#evaluación-y-diagnóstico-de-modelos",
    "title": "6  Gráficos para evaluación de modelos",
    "section": "",
    "text": "6.1.1 Ejemplo: diagnóstico de modelos de regresión\nEl diagnóstico de los modelos de regresión siempre se ha apoyado en la utilización de diagramas y gráficos para su evaluación crítica y la detección de posibles elementos problemáticos o que requieran especial atención.\nTomemos como ejemplo el conjunto de datos gala de paquete faraway, que contiene datos sobre un estudio sobre la ubicación de diferentes especies vegetales en las islas Galápagos.\nlibrary(faraway)\ndata(gala)\n\nlmod &lt;- lm(Species ~ Area + Elevation + Scruz + Nearest + Adjacent,\n           data=gala)\nplot(lmod)\n\n\n\n\n\n\n\n\n\n\n\n(a) Residuos vs. valores ajustados.\n\n\n\n\n\n\n\n\n\n\n\n(b) Q-Q residuos.\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) Gráfico de escala-localización.\n\n\n\n\n\n\n\n\n\n\n\n(d) Residuos vs. puntos palanca (leverage points).\n\n\n\n\n\n\n\nFigura 6.1: Gráficos para analizar un modelo de regresión lineal sobre el dataset gala. Fuente: (J. Faraway, 2022).\n\n\n\nAlgunos paquetes como ggstatsplot (Patil, 2021) permiten generar gráficos un poco más sofisticados para resumir el resultado de nuestros modelos y generar gráficos para inspeccionar su ajuste. Por ejemplo, en (J. J. Faraway, 2014) se sugiere que una transformación de tipo raíz cuadrada sobre la variable de conteo de especies permite mejorar el ajuste del modelo. La Figura 6.2 muestra un resumen gráfico de los coeficientes y tests asociados a este modelo.\n\nlibrary(ggstatsplot)\n\nYou can cite this package as:\n     Patil, I. (2021). Visualizations with statistical details: The 'ggstatsplot' approach.\n     Journal of Open Source Software, 6(61), 3167, doi:10.21105/joss.03167\n\nlmod_sqrt &lt;- lm(Species ~ Area + Elevation + Scruz + Nearest + Adjacent,\n           data=gala)\nggcoefstats(lmod_sqrt)\n\n\n\n\n\n\n\nFigura 6.2: Resumen de coeficientes y tests estadísticos asociados a un modelo de regresión.\n\n\n\n\n\nEl paquete adicional ggfortify nos puede ayudar a representar los gráficos de diagnóstico para este modelo de regresión utilizando ggplot2. La Figura 6.3 muestra un ejemplo de gráficos de diagnóstico\nhttps://cran.r-project.org/web/packages/ggfortify/vignettes/plot_lm.html.\n\nlibrary(ggfortify)\n\nCargando paquete requerido: ggplot2\n\nautoplot(lmod_sqrt, which = 1:6, ncol = 3, label.size = 3)\n\n\n\n\n\n\n\nFigura 6.3: Gráficos de diagnóstico del modelo de regresión sobre el dataset gala generados con el paquete ggfortify.",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Gráficos para evaluación de modelos</span>"
    ]
  },
  {
    "objectID": "06-models.html#xai-explanaible-ai",
    "href": "06-models.html#xai-explanaible-ai",
    "title": "6  Gráficos para evaluación de modelos",
    "section": "6.2 XAI: Explanaible AI",
    "text": "6.2 XAI: Explanaible AI\n\n6.2.1 Ejemplo: explicabilidad de algoritmos ML\nAl contrario que los modelos lineales, lineales generalizados o los árboles de decisión y métodos basados en ellos (e.g. Random Forest), muchos modelos de aprendizaje automático (ML) se comportan normalmente como si fuesen modelos opacos (black-box models), cuyo funcionamiento interno es dificil de comprender. A pesar de ello, en muchos casos es imprescindible que podamos crear gráficos y resultados que permitan comprender, al menos intuitivamente, las relaciones entre las variables entrantes y las salidas del algoritmo.\nDe hecho, tras las reciente aprobación en 2024 de la Ley sobre Inteligencia Artificial del Parlamento y el Consejo Europeo (Council of European Union, 2024), se considera de vital importancia en el nuevo contexto de aplicación de algoritmos y modelos de IA en el seno de la UE la inclusión de mecanismos que faciliten su explicabilidad e interpretabilidad de los resultados que devuelven. En este contexto, se ha acuñado en inglés el concepto de Explanaible Artificial Intelligence (XAI) como un conjunto de herramientas y métodos para explicar e interpretar modelos de ML.\nEn R existen, entre otros, dos paquetes principales que implementan métodos y herramientas para XAI:\n\nEl paquete iml\nDALEX (Descriptive mAchine Learning EXplanations) (Biecek & Burzykowski, 2021) propone todo un framework para explicabilidad de modelos ML. Su punto de entrada es la función explain() que envuelve un modelo predictivo posibilitando a partir de ese momento la aplicación de diversas herramientas de XAI más sofisticadas. La Figura 6.4 resume el flujo de trabajo estándar con el paquete DALEX y muestra la gran diversidad de modelos procedentes de otros paquetes que son compatibles con las herramientas de XAI incluidas en este framework.\nA su vez, la Figura 6.5 muestra la organización y conexiones entre las diferentes herramientas incluidas en el paquete DALEX para XAI.\n\n\n\n\n\n\n\nFigura 6.4: Esquema del flujo de trabajo para XAI en R utilizando el paquete DALEX.\n\n\n\n\n\n\n\n\n\nFigura 6.5: Organización de las diversas herramientas para XAI incluidas en el paquete DALEX.\n\n\n\n\n\n\n\nBiecek, P., & Burzykowski, T. (2021). Explanatory Model Analysis. Chapman & Hall/CRC Press. https://doi.org/10.1201/9780429027192\n\n\nCouncil of European Union. (2024). Regulation (EU) no. 2024/1689 (Artificial Intelligence Act).\n\n\nFaraway, J. (2022). ’faraway’: Functions and Datasets for Books by Julian Faraway. https://CRAN.R-project.org/package=faraway\n\n\nFaraway, J. J. (2014). Linear Models with R. Chapman & Hall/CRC Press. https://julianfaraway.github.io/faraway/LMR/\n\n\nPatil, I. (2021). Visualizations with statistical details: The ’ggstatsplot’ approach. Journal of Open Source Software, 6(61), 3167. https://doi.org/10.21105/joss.03167",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Gráficos para evaluación de modelos</span>"
    ]
  },
  {
    "objectID": "07-time-series.html",
    "href": "07-time-series.html",
    "title": "7  Visualización de series temporales",
    "section": "",
    "text": "7.1 Datos de series temporales\nBreve introducción a la estructura y representación de datos se series temporales, centrándonos en el paquete tsibble.",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Visualización de series temporales</span>"
    ]
  },
  {
    "objectID": "07-time-series.html#taller-práctico-2-representación-de-series-temporales",
    "href": "07-time-series.html#taller-práctico-2-representación-de-series-temporales",
    "title": "7  Visualización de series temporales",
    "section": "7.2 Taller práctico 2: representación de series temporales",
    "text": "7.2 Taller práctico 2: representación de series temporales",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Visualización de series temporales</span>"
    ]
  },
  {
    "objectID": "07-time-series.html#taller-práctico-3-visualización-de-modelos-de-predicción",
    "href": "07-time-series.html#taller-práctico-3-visualización-de-modelos-de-predicción",
    "title": "7  Visualización de series temporales",
    "section": "7.3 Taller práctico 3: visualización de modelos de predicción",
    "text": "7.3 Taller práctico 3: visualización de modelos de predicción",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Visualización de series temporales</span>"
    ]
  },
  {
    "objectID": "08-spatial.html",
    "href": "08-spatial.html",
    "title": "8  Visualización de datos espaciales",
    "section": "",
    "text": "8.1 Datos espaciales",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Visualización de datos espaciales</span>"
    ]
  },
  {
    "objectID": "08-spatial.html#representación-de-datos-espaciales",
    "href": "08-spatial.html#representación-de-datos-espaciales",
    "title": "8  Visualización de datos espaciales",
    "section": "8.2 Representación de datos espaciales",
    "text": "8.2 Representación de datos espaciales",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Visualización de datos espaciales</span>"
    ]
  },
  {
    "objectID": "08-spatial.html#taller-práctico-4-el-paquete-leaflet",
    "href": "08-spatial.html#taller-práctico-4-el-paquete-leaflet",
    "title": "8  Visualización de datos espaciales",
    "section": "8.3 Taller práctico 4: el paquete leaflet",
    "text": "8.3 Taller práctico 4: el paquete leaflet",
    "crumbs": [
      "Implementación",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Visualización de datos espaciales</span>"
    ]
  },
  {
    "objectID": "09-add-resources.html",
    "href": "09-add-resources.html",
    "title": "9  Recursos adicionales",
    "section": "",
    "text": "Manual de ggplot2: https://ggplot2-book.org (3ª ed. en progreso).\nGalería de gráficos en R: https://r-graph-gallery.com.\n20 ejemplos destacados de visualización de datos con R: https://r-graph-gallery.com/best-r-chart-examples.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Recursos adicionales</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Referencias",
    "section": "",
    "text": "Anscombe, F. J. (1973). Graphs in statistical analysis. American\nStatistician, 27(1), 17–21.\n\n\nBiecek, P., & Burzykowski, T. (2021). Explanatory model\nanalysis. Chapman & Hall/CRC Press. https://doi.org/10.1201/9780429027192\n\n\nBrunson, J. C. (2020). ggalluvial: Layered\ngrammar for alluvial plots. Journal of Open Source Software,\n5(49), 2017. https://doi.org/10.21105/joss.02017\n\n\nCleveland, W. S. (n.d.). Graphical methods for data presentation: Full\nscale breaks, dot charts, and multibased logging. The American\nStatistician, 38(4), 270–280.\n\n\nCleveland, W. S. (1981). LOWESS: A program for\nsmoothing scatterplots by robust locally weighted regression.\nAmerican Statistician, 35(1), 54.\n\n\nCleveland, W. S., Grosse, E., & Shyu, W. M. (1992). Local regression\nmodels. In J. M. Chambers & T. J. Hastie (Eds.), Statistical\nmodels in s. Wadsworth & Brooks/Cole.\n\n\nCouncil of European Union. (2024). Regulation (EU) no.\n2024/1689 (Artificial Intelligence\nAct).\n\n\nFaraway, J. (2022). ’Faraway’: Functions and datasets for books by\njulian faraway. https://CRAN.R-project.org/package=faraway\n\n\nFaraway, J. J. (2014). Linear Models with\nR. Chapman & Hall/CRC Press. https://julianfaraway.github.io/faraway/LMR/\n\n\nGomez, K. A., & Gomez, A. A. (1984). Statistical Procedures for Agricultural\nResearch. John Wiley & Sons.\n\n\nHealy, K. (2019). Data visualization. A practical introduction.\nPrinceton University Press. https://socviz.co/\n\n\nHeer, J., Bostock, M., & Ogievetsky, V. (2010). A tour through the\nvisualization zoo: A survey of powerful visualization techniques, from\nthe obvious to the obscure. Queue, 8(5), 20--30. https://doi.org/10.1145/1794514.1805128\n\n\nHolland, J. M., Perry, J. N., & Winder, L. (1999). The within-field\nspatial and temporal distribution of arthropods within winter wheat.\nBulletin of Entomological Research, 89, 499–513. https://doi.org/10.1017/S0007485399000656\n\n\nLovelace, R., Nowosad, J., & Muenchow, J. (2025). Geocomputation\nwith r. Chapman & Hall. https://r.geocompx.org/\n\n\nMunzner, T. (2015). Visualization analysis and design. A\nK Peters. http://www.cs.ubc.ca/\\%7Etmm/vadbook/\n\n\nPatil, I. (2021). Visualizations with statistical\ndetails: The ’ggstatsplot’ approach.\nJournal of Open Source Software, 6(61),\n3167. https://doi.org/10.21105/joss.03167\n\n\nPebesma, E., & Bivand, R. (2023). Spatial data science with\napplications in r. Chapman & Hall. https://r-spatial.org/book/\n\n\nRodney Edmondson, Hans-Peter Piepho, & Muhammad Yaseen. (2020).\nagriTutorial: Tutorial Analysis of Some\nAgricultural Experiments .\n\n\nSarkar, D. (2008). Lattice: Multivariate data\nvisualization with R. Springer. http://lmdvr.r-forge.r-project.org\n\n\nShneiderman, B. (1996). The eyes have it: A task by data\ntype taxonomy for information visualizations. Proceedings of the\n1996 IEEE Symposium on Visual Languages, Boulder, Colorado,\nUSA, September 3-6, 1996, 336–343. https://doi.org/10.1109/VL.1996.545307\n\n\nTufte, E. R. (2001). The visual display of quantitative\ninformation. Graphics Press LLC.\n\n\nTukey, J. W. (1977). Exploratory data analysis (1st ed.).\nAddison-Wesley Pub.\n\n\nWickham, H. (2010). A Layered Grammar of\nGraphics. Journal of Computational and Graphical\nStatistics, 19(1), 3–28. https://doi.org/10.1198/jcgs.2009.07098\n\n\nWickham, H. (2014). Tidy Data. Journal of Statistical\nSoftware, Articles, 59(10), 1–23. https://doi.org/10.18637/jss.v059.i10\n\n\nWickham, H., Navarro, D., & Pedersen, T. L. (2024). gglot2:\nElegant graphics for data analysis (3 ed.). Versión online (en\nprogreso). https://ggplot2-book.org/\n\n\nWilke, C. O. (2019). Fundamentals of data visualization.\nO’Reilly Media. https://clauswilke.com/dataviz/\n\n\nWilkinson, L. (2005). The grammar of graphics (2nd ed.).\nSpringer. https://doi.org/10.1007/0-387-28695-0\n\n\nWright, K. (2024). agridat: Agricultural\nDatasets. https://CRAN.R-project.org/package=agridat",
    "crumbs": [
      "Referencias"
    ]
  },
  {
    "objectID": "A-command-ref.html",
    "href": "A-command-ref.html",
    "title": "Apéndice A — Referencia de comandos",
    "section": "",
    "text": "A.1 Paquete ggplot2",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Referencia de comandos</span>"
    ]
  },
  {
    "objectID": "A-command-ref.html#series-temporales",
    "href": "A-command-ref.html#series-temporales",
    "title": "Apéndice A — Referencia de comandos",
    "section": "A.2 Series temporales",
    "text": "A.2 Series temporales",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Referencia de comandos</span>"
    ]
  },
  {
    "objectID": "A-command-ref.html#datos-espaciales",
    "href": "A-command-ref.html#datos-espaciales",
    "title": "Apéndice A — Referencia de comandos",
    "section": "A.3 Datos espaciales",
    "text": "A.3 Datos espaciales",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Referencia de comandos</span>"
    ]
  },
  {
    "objectID": "B-packages.html",
    "href": "B-packages.html",
    "title": "Apéndice B — Paquetes R y atribuciones",
    "section": "",
    "text": "B.1 Requisitos previos\nPara ejecutar los ejemplos incluidos en este taller, se necesita tener instalado R y una IDE de desarrollo para este lenguaje, como por ejemplo RStudio o Microsoft VS Code.",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Paquetes R y atribuciones</span>"
    ]
  },
  {
    "objectID": "B-packages.html#atribución-de-imágenes-e-iconos",
    "href": "B-packages.html#atribución-de-imágenes-e-iconos",
    "title": "Apéndice B — Paquetes R y atribuciones",
    "section": "B.2 Atribución de imágenes e iconos",
    "text": "B.2 Atribución de imágenes e iconos",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Paquetes R y atribuciones</span>"
    ]
  }
]